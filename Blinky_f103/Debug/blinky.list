
blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002e8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000418  08000420  00010420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000418  08000418  00010420  2**0
                  CONTENTS
  4 .ARM          00000000  08000418  08000418  00010420  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000418  08000420  00010420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000418  08000418  00010418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800041c  0800041c  0001041c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000420  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000420  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010420  2**0
                  CONTENTS, READONLY
 12 .debug_info   000005ba  00000000  00000000  00010449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001e4  00000000  00000000  00010a03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00010be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000080  00000000  00000000  00010c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000012e8  00000000  00000000  00010d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ade  00000000  00000000  00011ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004e74  00000000  00000000  00012ad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0001794a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001d0  00000000  00000000  000179a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000400 	.word	0x08000400

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000400 	.word	0x08000400

08000170 <main>:


void delay_ms(uint32_t);

int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
		delay_ms(100);						// waste approx 100 ms
		GPIOB->ODR &= ~(1 << 11);			// clear bit PB11
		delay_ms(100);
	}*/

	GPIO_PeriClkControl(GPIOA, ENABLE);
 8000174:	2101      	movs	r1, #1
 8000176:	4824      	ldr	r0, [pc, #144]	; (8000208 <main+0x98>)
 8000178:	f000 f896 	bl	80002a8 <GPIO_PeriClkControl>
	GPIOA->CRH = 0x44444442;
 800017c:	4b22      	ldr	r3, [pc, #136]	; (8000208 <main+0x98>)
 800017e:	4a23      	ldr	r2, [pc, #140]	; (800020c <main+0x9c>)
 8000180:	605a      	str	r2, [r3, #4]

	GPIO_PeriClkControl(GPIOB, ENABLE);
 8000182:	2101      	movs	r1, #1
 8000184:	4822      	ldr	r0, [pc, #136]	; (8000210 <main+0xa0>)
 8000186:	f000 f88f 	bl	80002a8 <GPIO_PeriClkControl>
	GPIOB->CRH = 0x44442444;
 800018a:	4b21      	ldr	r3, [pc, #132]	; (8000210 <main+0xa0>)
 800018c:	4a21      	ldr	r2, [pc, #132]	; (8000214 <main+0xa4>)
 800018e:	605a      	str	r2, [r3, #4]



	GPIO_PeriClkControl(GPIOC, ENABLE);			// for GPIOC this is working great. So now the question is why it is not working for GPIOA and GPIOB
 8000190:	2101      	movs	r1, #1
 8000192:	4821      	ldr	r0, [pc, #132]	; (8000218 <main+0xa8>)
 8000194:	f000 f888 	bl	80002a8 <GPIO_PeriClkControl>

	GPIOC->CRH &= ~(0XF << 20);
 8000198:	4b1f      	ldr	r3, [pc, #124]	; (8000218 <main+0xa8>)
 800019a:	685b      	ldr	r3, [r3, #4]
 800019c:	4a1e      	ldr	r2, [pc, #120]	; (8000218 <main+0xa8>)
 800019e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80001a2:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= (0X02 << 20);
 80001a4:	4b1c      	ldr	r3, [pc, #112]	; (8000218 <main+0xa8>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4a1b      	ldr	r2, [pc, #108]	; (8000218 <main+0xa8>)
 80001aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001ae:	6053      	str	r3, [r2, #4]



	while(1)		// infinite loop
	{
		GPIOC->ODR |= (1 << 13);			// setting bit PB13
 80001b0:	4b19      	ldr	r3, [pc, #100]	; (8000218 <main+0xa8>)
 80001b2:	68db      	ldr	r3, [r3, #12]
 80001b4:	4a18      	ldr	r2, [pc, #96]	; (8000218 <main+0xa8>)
 80001b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001ba:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR |= (1 << 11);
 80001bc:	4b14      	ldr	r3, [pc, #80]	; (8000210 <main+0xa0>)
 80001be:	68db      	ldr	r3, [r3, #12]
 80001c0:	4a13      	ldr	r2, [pc, #76]	; (8000210 <main+0xa0>)
 80001c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80001c6:	60d3      	str	r3, [r2, #12]
		GPIOA->ODR |= (1 << 8);
 80001c8:	4b0f      	ldr	r3, [pc, #60]	; (8000208 <main+0x98>)
 80001ca:	68db      	ldr	r3, [r3, #12]
 80001cc:	4a0e      	ldr	r2, [pc, #56]	; (8000208 <main+0x98>)
 80001ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001d2:	60d3      	str	r3, [r2, #12]
		delay_ms(1000);						// waste approx 100 ms
 80001d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001d8:	f000 f820 	bl	800021c <delay_ms>
		GPIOC->ODR &= ~(1 << 13);			// clear bit PB13
 80001dc:	4b0e      	ldr	r3, [pc, #56]	; (8000218 <main+0xa8>)
 80001de:	68db      	ldr	r3, [r3, #12]
 80001e0:	4a0d      	ldr	r2, [pc, #52]	; (8000218 <main+0xa8>)
 80001e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80001e6:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR &= ~(1 << 11);
 80001e8:	4b09      	ldr	r3, [pc, #36]	; (8000210 <main+0xa0>)
 80001ea:	68db      	ldr	r3, [r3, #12]
 80001ec:	4a08      	ldr	r2, [pc, #32]	; (8000210 <main+0xa0>)
 80001ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80001f2:	60d3      	str	r3, [r2, #12]
		GPIOA->ODR &= ~(1 << 8);
 80001f4:	4b04      	ldr	r3, [pc, #16]	; (8000208 <main+0x98>)
 80001f6:	68db      	ldr	r3, [r3, #12]
 80001f8:	4a03      	ldr	r2, [pc, #12]	; (8000208 <main+0x98>)
 80001fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80001fe:	60d3      	str	r3, [r2, #12]
		delay_ms(100);
 8000200:	2064      	movs	r0, #100	; 0x64
 8000202:	f000 f80b 	bl	800021c <delay_ms>
		GPIOC->ODR |= (1 << 13);			// setting bit PB13
 8000206:	e7d3      	b.n	80001b0 <main+0x40>
 8000208:	40010800 	.word	0x40010800
 800020c:	44444442 	.word	0x44444442
 8000210:	40010c00 	.word	0x40010c00
 8000214:	44442444 	.word	0x44442444
 8000218:	40011000 	.word	0x40011000

0800021c <delay_ms>:

}


void delay_ms(uint32_t ms)
{
 800021c:	b480      	push	{r7}
 800021e:	b085      	sub	sp, #20
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
	uint32_t delay = ms * 625;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	f240 2271 	movw	r2, #625	; 0x271
 800022a:	fb02 f303 	mul.w	r3, r2, r3
 800022e:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < delay; i++)  // 325000 = 500 msec rough estimation
 8000230:	2300      	movs	r3, #0
 8000232:	60fb      	str	r3, [r7, #12]
 8000234:	e003      	b.n	800023e <delay_ms+0x22>
		__asm__("nop");
 8000236:	bf00      	nop
	for (int i = 0; i < delay; i++)  // 325000 = 500 msec rough estimation
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	3301      	adds	r3, #1
 800023c:	60fb      	str	r3, [r7, #12]
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	68ba      	ldr	r2, [r7, #8]
 8000242:	429a      	cmp	r2, r3
 8000244:	d8f7      	bhi.n	8000236 <delay_ms+0x1a>
}
 8000246:	bf00      	nop
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
	...

08000254 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000254:	480d      	ldr	r0, [pc, #52]	; (800028c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000256:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000258:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800025c:	480c      	ldr	r0, [pc, #48]	; (8000290 <LoopForever+0x6>)
  ldr r1, =_edata
 800025e:	490d      	ldr	r1, [pc, #52]	; (8000294 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000260:	4a0d      	ldr	r2, [pc, #52]	; (8000298 <LoopForever+0xe>)
  movs r3, #0
 8000262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000264:	e002      	b.n	800026c <LoopCopyDataInit>

08000266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800026a:	3304      	adds	r3, #4

0800026c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800026c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800026e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000270:	d3f9      	bcc.n	8000266 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000272:	4a0a      	ldr	r2, [pc, #40]	; (800029c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000274:	4c0a      	ldr	r4, [pc, #40]	; (80002a0 <LoopForever+0x16>)
  movs r3, #0
 8000276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000278:	e001      	b.n	800027e <LoopFillZerobss>

0800027a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800027a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800027c:	3204      	adds	r2, #4

0800027e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800027e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000280:	d3fb      	bcc.n	800027a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000282:	f000 f899 	bl	80003b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000286:	f7ff ff73 	bl	8000170 <main>

0800028a <LoopForever>:

LoopForever:
    b LoopForever
 800028a:	e7fe      	b.n	800028a <LoopForever>
  ldr   r0, =_estack
 800028c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000294:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000298:	08000420 	.word	0x08000420
  ldr r2, =_sbss
 800029c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002a0:	2000001c 	.word	0x2000001c

080002a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002a4:	e7fe      	b.n	80002a4 <ADC1_2_IRQHandler>
	...

080002a8 <GPIO_PeriClkControl>:
/*
 * Peripheral Clock Setup
 */

void GPIO_PeriClkControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	460b      	mov	r3, r1
 80002b2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80002b4:	78fb      	ldrb	r3, [r7, #3]
 80002b6:	2b01      	cmp	r3, #1
 80002b8:	d136      	bne.n	8000328 <GPIO_PeriClkControl+0x80>
	{
		if(pGPIOx == GPIOA)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4a38      	ldr	r2, [pc, #224]	; (80003a0 <GPIO_PeriClkControl+0xf8>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	d106      	bne.n	80002d0 <GPIO_PeriClkControl+0x28>
		{
			GPIOA_PCLK_EN();
 80002c2:	4b38      	ldr	r3, [pc, #224]	; (80003a4 <GPIO_PeriClkControl+0xfc>)
 80002c4:	699b      	ldr	r3, [r3, #24]
 80002c6:	4a37      	ldr	r2, [pc, #220]	; (80003a4 <GPIO_PeriClkControl+0xfc>)
 80002c8:	f043 0304 	orr.w	r3, r3, #4
 80002cc:	6193      	str	r3, [r2, #24]
		{
			GPIOE_PCLK_DI();
		}
	}

}
 80002ce:	e061      	b.n	8000394 <GPIO_PeriClkControl+0xec>
		else if(pGPIOx == GPIOB)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4a35      	ldr	r2, [pc, #212]	; (80003a8 <GPIO_PeriClkControl+0x100>)
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d106      	bne.n	80002e6 <GPIO_PeriClkControl+0x3e>
			GPIOB_PCLK_EN();
 80002d8:	4b32      	ldr	r3, [pc, #200]	; (80003a4 <GPIO_PeriClkControl+0xfc>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a31      	ldr	r2, [pc, #196]	; (80003a4 <GPIO_PeriClkControl+0xfc>)
 80002de:	f043 0308 	orr.w	r3, r3, #8
 80002e2:	6193      	str	r3, [r2, #24]
}
 80002e4:	e056      	b.n	8000394 <GPIO_PeriClkControl+0xec>
		else if(pGPIOx == GPIOC)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4a30      	ldr	r2, [pc, #192]	; (80003ac <GPIO_PeriClkControl+0x104>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	d106      	bne.n	80002fc <GPIO_PeriClkControl+0x54>
			GPIOC_PCLK_EN();
 80002ee:	4b2d      	ldr	r3, [pc, #180]	; (80003a4 <GPIO_PeriClkControl+0xfc>)
 80002f0:	699b      	ldr	r3, [r3, #24]
 80002f2:	4a2c      	ldr	r2, [pc, #176]	; (80003a4 <GPIO_PeriClkControl+0xfc>)
 80002f4:	f043 0310 	orr.w	r3, r3, #16
 80002f8:	6193      	str	r3, [r2, #24]
}
 80002fa:	e04b      	b.n	8000394 <GPIO_PeriClkControl+0xec>
		else if(pGPIOx == GPIOD)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4a2c      	ldr	r2, [pc, #176]	; (80003b0 <GPIO_PeriClkControl+0x108>)
 8000300:	4293      	cmp	r3, r2
 8000302:	d106      	bne.n	8000312 <GPIO_PeriClkControl+0x6a>
			GPIOD_PCLK_EN();
 8000304:	4b27      	ldr	r3, [pc, #156]	; (80003a4 <GPIO_PeriClkControl+0xfc>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a26      	ldr	r2, [pc, #152]	; (80003a4 <GPIO_PeriClkControl+0xfc>)
 800030a:	f043 0320 	orr.w	r3, r3, #32
 800030e:	6193      	str	r3, [r2, #24]
}
 8000310:	e040      	b.n	8000394 <GPIO_PeriClkControl+0xec>
		else if(pGPIOx == GPIOE)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4a27      	ldr	r2, [pc, #156]	; (80003b4 <GPIO_PeriClkControl+0x10c>)
 8000316:	4293      	cmp	r3, r2
 8000318:	d13c      	bne.n	8000394 <GPIO_PeriClkControl+0xec>
			GPIOE_PCLK_EN();
 800031a:	4b22      	ldr	r3, [pc, #136]	; (80003a4 <GPIO_PeriClkControl+0xfc>)
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	4a21      	ldr	r2, [pc, #132]	; (80003a4 <GPIO_PeriClkControl+0xfc>)
 8000320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000324:	6193      	str	r3, [r2, #24]
}
 8000326:	e035      	b.n	8000394 <GPIO_PeriClkControl+0xec>
		if(pGPIOx == GPIOA)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4a1d      	ldr	r2, [pc, #116]	; (80003a0 <GPIO_PeriClkControl+0xf8>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d106      	bne.n	800033e <GPIO_PeriClkControl+0x96>
			GPIOA_PCLK_DI();
 8000330:	4b1c      	ldr	r3, [pc, #112]	; (80003a4 <GPIO_PeriClkControl+0xfc>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a1b      	ldr	r2, [pc, #108]	; (80003a4 <GPIO_PeriClkControl+0xfc>)
 8000336:	f023 0304 	bic.w	r3, r3, #4
 800033a:	6193      	str	r3, [r2, #24]
}
 800033c:	e02a      	b.n	8000394 <GPIO_PeriClkControl+0xec>
		else if(pGPIOx == GPIOB)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4a19      	ldr	r2, [pc, #100]	; (80003a8 <GPIO_PeriClkControl+0x100>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d106      	bne.n	8000354 <GPIO_PeriClkControl+0xac>
			GPIOB_PCLK_DI();
 8000346:	4b17      	ldr	r3, [pc, #92]	; (80003a4 <GPIO_PeriClkControl+0xfc>)
 8000348:	699b      	ldr	r3, [r3, #24]
 800034a:	4a16      	ldr	r2, [pc, #88]	; (80003a4 <GPIO_PeriClkControl+0xfc>)
 800034c:	f023 0308 	bic.w	r3, r3, #8
 8000350:	6193      	str	r3, [r2, #24]
}
 8000352:	e01f      	b.n	8000394 <GPIO_PeriClkControl+0xec>
		else if(pGPIOx == GPIOC)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4a15      	ldr	r2, [pc, #84]	; (80003ac <GPIO_PeriClkControl+0x104>)
 8000358:	4293      	cmp	r3, r2
 800035a:	d106      	bne.n	800036a <GPIO_PeriClkControl+0xc2>
			GPIOC_PCLK_DI();
 800035c:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <GPIO_PeriClkControl+0xfc>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	4a10      	ldr	r2, [pc, #64]	; (80003a4 <GPIO_PeriClkControl+0xfc>)
 8000362:	f023 0310 	bic.w	r3, r3, #16
 8000366:	6193      	str	r3, [r2, #24]
}
 8000368:	e014      	b.n	8000394 <GPIO_PeriClkControl+0xec>
		else if(pGPIOx == GPIOD)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4a10      	ldr	r2, [pc, #64]	; (80003b0 <GPIO_PeriClkControl+0x108>)
 800036e:	4293      	cmp	r3, r2
 8000370:	d106      	bne.n	8000380 <GPIO_PeriClkControl+0xd8>
			GPIOD_PCLK_DI();
 8000372:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <GPIO_PeriClkControl+0xfc>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	4a0b      	ldr	r2, [pc, #44]	; (80003a4 <GPIO_PeriClkControl+0xfc>)
 8000378:	f023 0320 	bic.w	r3, r3, #32
 800037c:	6193      	str	r3, [r2, #24]
}
 800037e:	e009      	b.n	8000394 <GPIO_PeriClkControl+0xec>
		else if(pGPIOx == GPIOE)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a0c      	ldr	r2, [pc, #48]	; (80003b4 <GPIO_PeriClkControl+0x10c>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d105      	bne.n	8000394 <GPIO_PeriClkControl+0xec>
			GPIOE_PCLK_DI();
 8000388:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <GPIO_PeriClkControl+0xfc>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a05      	ldr	r2, [pc, #20]	; (80003a4 <GPIO_PeriClkControl+0xfc>)
 800038e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000392:	6193      	str	r3, [r2, #24]
}
 8000394:	bf00      	nop
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	40010800 	.word	0x40010800
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40010c00 	.word	0x40010c00
 80003ac:	40011000 	.word	0x40011000
 80003b0:	40011400 	.word	0x40011400
 80003b4:	40011800 	.word	0x40011800

080003b8 <__libc_init_array>:
 80003b8:	b570      	push	{r4, r5, r6, lr}
 80003ba:	2600      	movs	r6, #0
 80003bc:	4d0c      	ldr	r5, [pc, #48]	; (80003f0 <__libc_init_array+0x38>)
 80003be:	4c0d      	ldr	r4, [pc, #52]	; (80003f4 <__libc_init_array+0x3c>)
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	10a4      	asrs	r4, r4, #2
 80003c4:	42a6      	cmp	r6, r4
 80003c6:	d109      	bne.n	80003dc <__libc_init_array+0x24>
 80003c8:	f000 f81a 	bl	8000400 <_init>
 80003cc:	2600      	movs	r6, #0
 80003ce:	4d0a      	ldr	r5, [pc, #40]	; (80003f8 <__libc_init_array+0x40>)
 80003d0:	4c0a      	ldr	r4, [pc, #40]	; (80003fc <__libc_init_array+0x44>)
 80003d2:	1b64      	subs	r4, r4, r5
 80003d4:	10a4      	asrs	r4, r4, #2
 80003d6:	42a6      	cmp	r6, r4
 80003d8:	d105      	bne.n	80003e6 <__libc_init_array+0x2e>
 80003da:	bd70      	pop	{r4, r5, r6, pc}
 80003dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e0:	4798      	blx	r3
 80003e2:	3601      	adds	r6, #1
 80003e4:	e7ee      	b.n	80003c4 <__libc_init_array+0xc>
 80003e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ea:	4798      	blx	r3
 80003ec:	3601      	adds	r6, #1
 80003ee:	e7f2      	b.n	80003d6 <__libc_init_array+0x1e>
 80003f0:	08000418 	.word	0x08000418
 80003f4:	08000418 	.word	0x08000418
 80003f8:	08000418 	.word	0x08000418
 80003fc:	0800041c 	.word	0x0800041c

08000400 <_init>:
 8000400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000402:	bf00      	nop
 8000404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000406:	bc08      	pop	{r3}
 8000408:	469e      	mov	lr, r3
 800040a:	4770      	bx	lr

0800040c <_fini>:
 800040c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040e:	bf00      	nop
 8000410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000412:	bc08      	pop	{r3}
 8000414:	469e      	mov	lr, r3
 8000416:	4770      	bx	lr
