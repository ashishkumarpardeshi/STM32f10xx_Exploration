
lcd16x2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001004  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001134  08001134  00011134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001158  08001158  00011160  2**0
                  CONTENTS
  4 .ARM          00000000  08001158  08001158  00011160  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001158  08001160  00011160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001158  08001158  00011158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800115c  0800115c  0001115c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08001160  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08001160  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011160  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000ba2  00000000  00000000  00011189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000371  00000000  00000000  00011d2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000128  00000000  00000000  000120a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000f0  00000000  00000000  000121c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000153c  00000000  00000000  000122b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000011ee  00000000  00000000  000137f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000053df  00000000  00000000  000149e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00019dc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004b0  00000000  00000000  00019e14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800111c 	.word	0x0800111c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800111c 	.word	0x0800111c

08000170 <__aeabi_dmul>:
 8000170:	b570      	push	{r4, r5, r6, lr}
 8000172:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000176:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800017a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800017e:	bf1d      	ittte	ne
 8000180:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000184:	ea94 0f0c 	teqne	r4, ip
 8000188:	ea95 0f0c 	teqne	r5, ip
 800018c:	f000 f8de 	bleq	800034c <__aeabi_dmul+0x1dc>
 8000190:	442c      	add	r4, r5
 8000192:	ea81 0603 	eor.w	r6, r1, r3
 8000196:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800019a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800019e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001a2:	bf18      	it	ne
 80001a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80001ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001b0:	d038      	beq.n	8000224 <__aeabi_dmul+0xb4>
 80001b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001b6:	f04f 0500 	mov.w	r5, #0
 80001ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001c6:	f04f 0600 	mov.w	r6, #0
 80001ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ce:	f09c 0f00 	teq	ip, #0
 80001d2:	bf18      	it	ne
 80001d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001e4:	d204      	bcs.n	80001f0 <__aeabi_dmul+0x80>
 80001e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ea:	416d      	adcs	r5, r5
 80001ec:	eb46 0606 	adc.w	r6, r6, r6
 80001f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000200:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000204:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000208:	bf88      	it	hi
 800020a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800020e:	d81e      	bhi.n	800024e <__aeabi_dmul+0xde>
 8000210:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000214:	bf08      	it	eq
 8000216:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800021a:	f150 0000 	adcs.w	r0, r0, #0
 800021e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000222:	bd70      	pop	{r4, r5, r6, pc}
 8000224:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000228:	ea46 0101 	orr.w	r1, r6, r1
 800022c:	ea40 0002 	orr.w	r0, r0, r2
 8000230:	ea81 0103 	eor.w	r1, r1, r3
 8000234:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000238:	bfc2      	ittt	gt
 800023a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800023e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000242:	bd70      	popgt	{r4, r5, r6, pc}
 8000244:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000248:	f04f 0e00 	mov.w	lr, #0
 800024c:	3c01      	subs	r4, #1
 800024e:	f300 80ab 	bgt.w	80003a8 <__aeabi_dmul+0x238>
 8000252:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000256:	bfde      	ittt	le
 8000258:	2000      	movle	r0, #0
 800025a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800025e:	bd70      	pople	{r4, r5, r6, pc}
 8000260:	f1c4 0400 	rsb	r4, r4, #0
 8000264:	3c20      	subs	r4, #32
 8000266:	da35      	bge.n	80002d4 <__aeabi_dmul+0x164>
 8000268:	340c      	adds	r4, #12
 800026a:	dc1b      	bgt.n	80002a4 <__aeabi_dmul+0x134>
 800026c:	f104 0414 	add.w	r4, r4, #20
 8000270:	f1c4 0520 	rsb	r5, r4, #32
 8000274:	fa00 f305 	lsl.w	r3, r0, r5
 8000278:	fa20 f004 	lsr.w	r0, r0, r4
 800027c:	fa01 f205 	lsl.w	r2, r1, r5
 8000280:	ea40 0002 	orr.w	r0, r0, r2
 8000284:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000288:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800028c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000290:	fa21 f604 	lsr.w	r6, r1, r4
 8000294:	eb42 0106 	adc.w	r1, r2, r6
 8000298:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800029c:	bf08      	it	eq
 800029e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002a2:	bd70      	pop	{r4, r5, r6, pc}
 80002a4:	f1c4 040c 	rsb	r4, r4, #12
 80002a8:	f1c4 0520 	rsb	r5, r4, #32
 80002ac:	fa00 f304 	lsl.w	r3, r0, r4
 80002b0:	fa20 f005 	lsr.w	r0, r0, r5
 80002b4:	fa01 f204 	lsl.w	r2, r1, r4
 80002b8:	ea40 0002 	orr.w	r0, r0, r2
 80002bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002cc:	bf08      	it	eq
 80002ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002d2:	bd70      	pop	{r4, r5, r6, pc}
 80002d4:	f1c4 0520 	rsb	r5, r4, #32
 80002d8:	fa00 f205 	lsl.w	r2, r0, r5
 80002dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002e0:	fa20 f304 	lsr.w	r3, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea43 0302 	orr.w	r3, r3, r2
 80002ec:	fa21 f004 	lsr.w	r0, r1, r4
 80002f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	fa21 f204 	lsr.w	r2, r1, r4
 80002f8:	ea20 0002 	bic.w	r0, r0, r2
 80002fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f094 0f00 	teq	r4, #0
 8000310:	d10f      	bne.n	8000332 <__aeabi_dmul+0x1c2>
 8000312:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000316:	0040      	lsls	r0, r0, #1
 8000318:	eb41 0101 	adc.w	r1, r1, r1
 800031c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3c01      	subeq	r4, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1a6>
 8000326:	ea41 0106 	orr.w	r1, r1, r6
 800032a:	f095 0f00 	teq	r5, #0
 800032e:	bf18      	it	ne
 8000330:	4770      	bxne	lr
 8000332:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000336:	0052      	lsls	r2, r2, #1
 8000338:	eb43 0303 	adc.w	r3, r3, r3
 800033c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000340:	bf08      	it	eq
 8000342:	3d01      	subeq	r5, #1
 8000344:	d0f7      	beq.n	8000336 <__aeabi_dmul+0x1c6>
 8000346:	ea43 0306 	orr.w	r3, r3, r6
 800034a:	4770      	bx	lr
 800034c:	ea94 0f0c 	teq	r4, ip
 8000350:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000354:	bf18      	it	ne
 8000356:	ea95 0f0c 	teqne	r5, ip
 800035a:	d00c      	beq.n	8000376 <__aeabi_dmul+0x206>
 800035c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000360:	bf18      	it	ne
 8000362:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000366:	d1d1      	bne.n	800030c <__aeabi_dmul+0x19c>
 8000368:	ea81 0103 	eor.w	r1, r1, r3
 800036c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000370:	f04f 0000 	mov.w	r0, #0
 8000374:	bd70      	pop	{r4, r5, r6, pc}
 8000376:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800037a:	bf06      	itte	eq
 800037c:	4610      	moveq	r0, r2
 800037e:	4619      	moveq	r1, r3
 8000380:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000384:	d019      	beq.n	80003ba <__aeabi_dmul+0x24a>
 8000386:	ea94 0f0c 	teq	r4, ip
 800038a:	d102      	bne.n	8000392 <__aeabi_dmul+0x222>
 800038c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000390:	d113      	bne.n	80003ba <__aeabi_dmul+0x24a>
 8000392:	ea95 0f0c 	teq	r5, ip
 8000396:	d105      	bne.n	80003a4 <__aeabi_dmul+0x234>
 8000398:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800039c:	bf1c      	itt	ne
 800039e:	4610      	movne	r0, r2
 80003a0:	4619      	movne	r1, r3
 80003a2:	d10a      	bne.n	80003ba <__aeabi_dmul+0x24a>
 80003a4:	ea81 0103 	eor.w	r1, r1, r3
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd70      	pop	{r4, r5, r6, pc}
 80003ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003c2:	bd70      	pop	{r4, r5, r6, pc}

080003c4 <__aeabi_drsub>:
 80003c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	e002      	b.n	80003d0 <__adddf3>
 80003ca:	bf00      	nop

080003cc <__aeabi_dsub>:
 80003cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003d0 <__adddf3>:
 80003d0:	b530      	push	{r4, r5, lr}
 80003d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	bf1f      	itttt	ne
 80003e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f6:	f000 80e2 	beq.w	80005be <__adddf3+0x1ee>
 80003fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000402:	bfb8      	it	lt
 8000404:	426d      	neglt	r5, r5
 8000406:	dd0c      	ble.n	8000422 <__adddf3+0x52>
 8000408:	442c      	add	r4, r5
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	ea82 0000 	eor.w	r0, r2, r0
 8000416:	ea83 0101 	eor.w	r1, r3, r1
 800041a:	ea80 0202 	eor.w	r2, r0, r2
 800041e:	ea81 0303 	eor.w	r3, r1, r3
 8000422:	2d36      	cmp	r5, #54	; 0x36
 8000424:	bf88      	it	hi
 8000426:	bd30      	pophi	{r4, r5, pc}
 8000428:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800042c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000430:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000434:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x70>
 800043a:	4240      	negs	r0, r0
 800043c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000440:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000444:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000448:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800044c:	d002      	beq.n	8000454 <__adddf3+0x84>
 800044e:	4252      	negs	r2, r2
 8000450:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000454:	ea94 0f05 	teq	r4, r5
 8000458:	f000 80a7 	beq.w	80005aa <__adddf3+0x1da>
 800045c:	f1a4 0401 	sub.w	r4, r4, #1
 8000460:	f1d5 0e20 	rsbs	lr, r5, #32
 8000464:	db0d      	blt.n	8000482 <__adddf3+0xb2>
 8000466:	fa02 fc0e 	lsl.w	ip, r2, lr
 800046a:	fa22 f205 	lsr.w	r2, r2, r5
 800046e:	1880      	adds	r0, r0, r2
 8000470:	f141 0100 	adc.w	r1, r1, #0
 8000474:	fa03 f20e 	lsl.w	r2, r3, lr
 8000478:	1880      	adds	r0, r0, r2
 800047a:	fa43 f305 	asr.w	r3, r3, r5
 800047e:	4159      	adcs	r1, r3
 8000480:	e00e      	b.n	80004a0 <__adddf3+0xd0>
 8000482:	f1a5 0520 	sub.w	r5, r5, #32
 8000486:	f10e 0e20 	add.w	lr, lr, #32
 800048a:	2a01      	cmp	r2, #1
 800048c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000490:	bf28      	it	cs
 8000492:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	18c0      	adds	r0, r0, r3
 800049c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a4:	d507      	bpl.n	80004b6 <__adddf3+0xe6>
 80004a6:	f04f 0e00 	mov.w	lr, #0
 80004aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004ba:	d31b      	bcc.n	80004f4 <__adddf3+0x124>
 80004bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004c0:	d30c      	bcc.n	80004dc <__adddf3+0x10c>
 80004c2:	0849      	lsrs	r1, r1, #1
 80004c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004cc:	f104 0401 	add.w	r4, r4, #1
 80004d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d8:	f080 809a 	bcs.w	8000610 <__adddf3+0x240>
 80004dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004e0:	bf08      	it	eq
 80004e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e6:	f150 0000 	adcs.w	r0, r0, #0
 80004ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ee:	ea41 0105 	orr.w	r1, r1, r5
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f8:	4140      	adcs	r0, r0
 80004fa:	eb41 0101 	adc.w	r1, r1, r1
 80004fe:	3c01      	subs	r4, #1
 8000500:	bf28      	it	cs
 8000502:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000506:	d2e9      	bcs.n	80004dc <__adddf3+0x10c>
 8000508:	f091 0f00 	teq	r1, #0
 800050c:	bf04      	itt	eq
 800050e:	4601      	moveq	r1, r0
 8000510:	2000      	moveq	r0, #0
 8000512:	fab1 f381 	clz	r3, r1
 8000516:	bf08      	it	eq
 8000518:	3320      	addeq	r3, #32
 800051a:	f1a3 030b 	sub.w	r3, r3, #11
 800051e:	f1b3 0220 	subs.w	r2, r3, #32
 8000522:	da0c      	bge.n	800053e <__adddf3+0x16e>
 8000524:	320c      	adds	r2, #12
 8000526:	dd08      	ble.n	800053a <__adddf3+0x16a>
 8000528:	f102 0c14 	add.w	ip, r2, #20
 800052c:	f1c2 020c 	rsb	r2, r2, #12
 8000530:	fa01 f00c 	lsl.w	r0, r1, ip
 8000534:	fa21 f102 	lsr.w	r1, r1, r2
 8000538:	e00c      	b.n	8000554 <__adddf3+0x184>
 800053a:	f102 0214 	add.w	r2, r2, #20
 800053e:	bfd8      	it	le
 8000540:	f1c2 0c20 	rsble	ip, r2, #32
 8000544:	fa01 f102 	lsl.w	r1, r1, r2
 8000548:	fa20 fc0c 	lsr.w	ip, r0, ip
 800054c:	bfdc      	itt	le
 800054e:	ea41 010c 	orrle.w	r1, r1, ip
 8000552:	4090      	lslle	r0, r2
 8000554:	1ae4      	subs	r4, r4, r3
 8000556:	bfa2      	ittt	ge
 8000558:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800055c:	4329      	orrge	r1, r5
 800055e:	bd30      	popge	{r4, r5, pc}
 8000560:	ea6f 0404 	mvn.w	r4, r4
 8000564:	3c1f      	subs	r4, #31
 8000566:	da1c      	bge.n	80005a2 <__adddf3+0x1d2>
 8000568:	340c      	adds	r4, #12
 800056a:	dc0e      	bgt.n	800058a <__adddf3+0x1ba>
 800056c:	f104 0414 	add.w	r4, r4, #20
 8000570:	f1c4 0220 	rsb	r2, r4, #32
 8000574:	fa20 f004 	lsr.w	r0, r0, r4
 8000578:	fa01 f302 	lsl.w	r3, r1, r2
 800057c:	ea40 0003 	orr.w	r0, r0, r3
 8000580:	fa21 f304 	lsr.w	r3, r1, r4
 8000584:	ea45 0103 	orr.w	r1, r5, r3
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f1c4 040c 	rsb	r4, r4, #12
 800058e:	f1c4 0220 	rsb	r2, r4, #32
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 f304 	lsl.w	r3, r1, r4
 800059a:	ea40 0003 	orr.w	r0, r0, r3
 800059e:	4629      	mov	r1, r5
 80005a0:	bd30      	pop	{r4, r5, pc}
 80005a2:	fa21 f004 	lsr.w	r0, r1, r4
 80005a6:	4629      	mov	r1, r5
 80005a8:	bd30      	pop	{r4, r5, pc}
 80005aa:	f094 0f00 	teq	r4, #0
 80005ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005b2:	bf06      	itte	eq
 80005b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b8:	3401      	addeq	r4, #1
 80005ba:	3d01      	subne	r5, #1
 80005bc:	e74e      	b.n	800045c <__adddf3+0x8c>
 80005be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005c2:	bf18      	it	ne
 80005c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c8:	d029      	beq.n	800061e <__adddf3+0x24e>
 80005ca:	ea94 0f05 	teq	r4, r5
 80005ce:	bf08      	it	eq
 80005d0:	ea90 0f02 	teqeq	r0, r2
 80005d4:	d005      	beq.n	80005e2 <__adddf3+0x212>
 80005d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005da:	bf04      	itt	eq
 80005dc:	4619      	moveq	r1, r3
 80005de:	4610      	moveq	r0, r2
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	ea91 0f03 	teq	r1, r3
 80005e6:	bf1e      	ittt	ne
 80005e8:	2100      	movne	r1, #0
 80005ea:	2000      	movne	r0, #0
 80005ec:	bd30      	popne	{r4, r5, pc}
 80005ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005f2:	d105      	bne.n	8000600 <__adddf3+0x230>
 80005f4:	0040      	lsls	r0, r0, #1
 80005f6:	4149      	adcs	r1, r1
 80005f8:	bf28      	it	cs
 80005fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fe:	bd30      	pop	{r4, r5, pc}
 8000600:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000604:	bf3c      	itt	cc
 8000606:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800060a:	bd30      	popcc	{r4, r5, pc}
 800060c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000610:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000614:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000618:	f04f 0000 	mov.w	r0, #0
 800061c:	bd30      	pop	{r4, r5, pc}
 800061e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000622:	bf1a      	itte	ne
 8000624:	4619      	movne	r1, r3
 8000626:	4610      	movne	r0, r2
 8000628:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800062c:	bf1c      	itt	ne
 800062e:	460b      	movne	r3, r1
 8000630:	4602      	movne	r2, r0
 8000632:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000636:	bf06      	itte	eq
 8000638:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800063c:	ea91 0f03 	teqeq	r1, r3
 8000640:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000644:	bd30      	pop	{r4, r5, pc}
 8000646:	bf00      	nop

08000648 <__aeabi_ui2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f04f 0500 	mov.w	r5, #0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e750      	b.n	8000508 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_i2d>:
 8000668:	f090 0f00 	teq	r0, #0
 800066c:	bf04      	itt	eq
 800066e:	2100      	moveq	r1, #0
 8000670:	4770      	bxeq	lr
 8000672:	b530      	push	{r4, r5, lr}
 8000674:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000678:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800067c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000680:	bf48      	it	mi
 8000682:	4240      	negmi	r0, r0
 8000684:	f04f 0100 	mov.w	r1, #0
 8000688:	e73e      	b.n	8000508 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_f2d>:
 800068c:	0042      	lsls	r2, r0, #1
 800068e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000692:	ea4f 0131 	mov.w	r1, r1, rrx
 8000696:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800069a:	bf1f      	itttt	ne
 800069c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a8:	4770      	bxne	lr
 80006aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006ae:	bf08      	it	eq
 80006b0:	4770      	bxeq	lr
 80006b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b6:	bf04      	itt	eq
 80006b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006bc:	4770      	bxeq	lr
 80006be:	b530      	push	{r4, r5, lr}
 80006c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	e71c      	b.n	8000508 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_ul2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f04f 0500 	mov.w	r5, #0
 80006de:	e00a      	b.n	80006f6 <__aeabi_l2d+0x16>

080006e0 <__aeabi_l2d>:
 80006e0:	ea50 0201 	orrs.w	r2, r0, r1
 80006e4:	bf08      	it	eq
 80006e6:	4770      	bxeq	lr
 80006e8:	b530      	push	{r4, r5, lr}
 80006ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ee:	d502      	bpl.n	80006f6 <__aeabi_l2d+0x16>
 80006f0:	4240      	negs	r0, r0
 80006f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000702:	f43f aed8 	beq.w	80004b6 <__adddf3+0xe6>
 8000706:	f04f 0203 	mov.w	r2, #3
 800070a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070e:	bf18      	it	ne
 8000710:	3203      	addne	r2, #3
 8000712:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000716:	bf18      	it	ne
 8000718:	3203      	addne	r2, #3
 800071a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071e:	f1c2 0320 	rsb	r3, r2, #32
 8000722:	fa00 fc03 	lsl.w	ip, r0, r3
 8000726:	fa20 f002 	lsr.w	r0, r0, r2
 800072a:	fa01 fe03 	lsl.w	lr, r1, r3
 800072e:	ea40 000e 	orr.w	r0, r0, lr
 8000732:	fa21 f102 	lsr.w	r1, r1, r2
 8000736:	4414      	add	r4, r2
 8000738:	e6bd      	b.n	80004b6 <__adddf3+0xe6>
 800073a:	bf00      	nop

0800073c <__aeabi_d2uiz>:
 800073c:	004a      	lsls	r2, r1, #1
 800073e:	d211      	bcs.n	8000764 <__aeabi_d2uiz+0x28>
 8000740:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000744:	d211      	bcs.n	800076a <__aeabi_d2uiz+0x2e>
 8000746:	d50d      	bpl.n	8000764 <__aeabi_d2uiz+0x28>
 8000748:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800074c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000750:	d40e      	bmi.n	8000770 <__aeabi_d2uiz+0x34>
 8000752:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000756:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800075a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800075e:	fa23 f002 	lsr.w	r0, r3, r2
 8000762:	4770      	bx	lr
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	4770      	bx	lr
 800076a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800076e:	d102      	bne.n	8000776 <__aeabi_d2uiz+0x3a>
 8000770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000774:	4770      	bx	lr
 8000776:	f04f 0000 	mov.w	r0, #0
 800077a:	4770      	bx	lr

0800077c <GPIO_Init>:
/*
 * Init and Deinit GPIO
 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800077c:	b480      	push	{r7}
 800077e:	b087      	sub	sp, #28
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0x0;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
	uint32_t crl = 0x0, crh = 0x0;
 8000788:	2300      	movs	r3, #0
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
	uint16_t offset;
	uint8_t pinNo;

	pinNo = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	791b      	ldrb	r3, [r3, #4]
 8000794:	727b      	strb	r3, [r7, #9]

	crl = pGPIOHandle -> pGPIOx -> CRL;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	613b      	str	r3, [r7, #16]
	crh = pGPIOHandle -> pGPIOx -> CRH;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	60fb      	str	r3, [r7, #12]

	if(pinNo < 8)
 80007a6:	7a7b      	ldrb	r3, [r7, #9]
 80007a8:	2b07      	cmp	r3, #7
 80007aa:	d806      	bhi.n	80007ba <GPIO_Init+0x3e>
	{
		offset = pinNo * 4;
 80007ac:	7a7b      	ldrb	r3, [r7, #9]
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	817b      	strh	r3, [r7, #10]
		temp = crl;
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	e006      	b.n	80007c8 <GPIO_Init+0x4c>
	}
	else
	{
		offset = (pinNo - 8) * 4;
 80007ba:	7a7b      	ldrb	r3, [r7, #9]
 80007bc:	3b08      	subs	r3, #8
 80007be:	b29b      	uxth	r3, r3
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	817b      	strh	r3, [r7, #10]
		temp = crh;
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	617b      	str	r3, [r7, #20]
	}

	temp &= ~(0xf << offset);
 80007c8:	897b      	ldrh	r3, [r7, #10]
 80007ca:	220f      	movs	r2, #15
 80007cc:	fa02 f303 	lsl.w	r3, r2, r3
 80007d0:	43db      	mvns	r3, r3
 80007d2:	461a      	mov	r2, r3
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	4013      	ands	r3, r2
 80007d8:	617b      	str	r3, [r7, #20]
	temp |= (pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << offset)| (pGPIOHandle -> GPIO_PinConfig.GPIO_PinOutInType << (offset + 2));
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	795b      	ldrb	r3, [r3, #5]
 80007de:	461a      	mov	r2, r3
 80007e0:	897b      	ldrh	r3, [r7, #10]
 80007e2:	409a      	lsls	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	799b      	ldrb	r3, [r3, #6]
 80007e8:	4619      	mov	r1, r3
 80007ea:	897b      	ldrh	r3, [r7, #10]
 80007ec:	3302      	adds	r3, #2
 80007ee:	fa01 f303 	lsl.w	r3, r1, r3
 80007f2:	4313      	orrs	r3, r2
 80007f4:	461a      	mov	r2, r3
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	617b      	str	r3, [r7, #20]

	if(pinNo < 8)
 80007fc:	7a7b      	ldrb	r3, [r7, #9]
 80007fe:	2b07      	cmp	r3, #7
 8000800:	d802      	bhi.n	8000808 <GPIO_Init+0x8c>
	{
		crl = temp;
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	e001      	b.n	800080c <GPIO_Init+0x90>
		//pGPIOHandle -> pGPIOx -> CRL =  temp;
	}
	else
	{
		crh = temp;
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	60fb      	str	r3, [r7, #12]
		//pGPIOHandle -> pGPIOx -> CRH = temp;

	}

	pGPIOHandle -> pGPIOx -> CRL =  crl;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	693a      	ldr	r2, [r7, #16]
 8000812:	601a      	str	r2, [r3, #0]
	pGPIOHandle -> pGPIOx -> CRH = crh;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	68fa      	ldr	r2, [r7, #12]
 800081a:	605a      	str	r2, [r3, #4]

}
 800081c:	bf00      	nop
 800081e:	371c      	adds	r7, #28
 8000820:	46bd      	mov	sp, r7
 8000822:	bc80      	pop	{r7}
 8000824:	4770      	bx	lr
	...

08000828 <GPIO_PeriClkControl>:
/*
 * Peripheral Clock Setup
 */

void GPIO_PeriClkControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	460b      	mov	r3, r1
 8000832:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000834:	78fb      	ldrb	r3, [r7, #3]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d136      	bne.n	80008a8 <GPIO_PeriClkControl+0x80>
	{
		if(pGPIOx == GPIOA)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4a38      	ldr	r2, [pc, #224]	; (8000920 <GPIO_PeriClkControl+0xf8>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d106      	bne.n	8000850 <GPIO_PeriClkControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000842:	4b38      	ldr	r3, [pc, #224]	; (8000924 <GPIO_PeriClkControl+0xfc>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	4a37      	ldr	r2, [pc, #220]	; (8000924 <GPIO_PeriClkControl+0xfc>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	6193      	str	r3, [r2, #24]
		}

			//AFIO_PCLK_DI();
	}

}
 800084e:	e061      	b.n	8000914 <GPIO_PeriClkControl+0xec>
		else if(pGPIOx == GPIOB)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4a35      	ldr	r2, [pc, #212]	; (8000928 <GPIO_PeriClkControl+0x100>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d106      	bne.n	8000866 <GPIO_PeriClkControl+0x3e>
			GPIOB_PCLK_EN();
 8000858:	4b32      	ldr	r3, [pc, #200]	; (8000924 <GPIO_PeriClkControl+0xfc>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	4a31      	ldr	r2, [pc, #196]	; (8000924 <GPIO_PeriClkControl+0xfc>)
 800085e:	f043 0308 	orr.w	r3, r3, #8
 8000862:	6193      	str	r3, [r2, #24]
}
 8000864:	e056      	b.n	8000914 <GPIO_PeriClkControl+0xec>
		else if(pGPIOx == GPIOC)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4a30      	ldr	r2, [pc, #192]	; (800092c <GPIO_PeriClkControl+0x104>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d106      	bne.n	800087c <GPIO_PeriClkControl+0x54>
			GPIOC_PCLK_EN();
 800086e:	4b2d      	ldr	r3, [pc, #180]	; (8000924 <GPIO_PeriClkControl+0xfc>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	4a2c      	ldr	r2, [pc, #176]	; (8000924 <GPIO_PeriClkControl+0xfc>)
 8000874:	f043 0310 	orr.w	r3, r3, #16
 8000878:	6193      	str	r3, [r2, #24]
}
 800087a:	e04b      	b.n	8000914 <GPIO_PeriClkControl+0xec>
		else if(pGPIOx == GPIOD)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a2c      	ldr	r2, [pc, #176]	; (8000930 <GPIO_PeriClkControl+0x108>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d106      	bne.n	8000892 <GPIO_PeriClkControl+0x6a>
			GPIOD_PCLK_EN();
 8000884:	4b27      	ldr	r3, [pc, #156]	; (8000924 <GPIO_PeriClkControl+0xfc>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a26      	ldr	r2, [pc, #152]	; (8000924 <GPIO_PeriClkControl+0xfc>)
 800088a:	f043 0320 	orr.w	r3, r3, #32
 800088e:	6193      	str	r3, [r2, #24]
}
 8000890:	e040      	b.n	8000914 <GPIO_PeriClkControl+0xec>
		else if(pGPIOx == GPIOE)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4a27      	ldr	r2, [pc, #156]	; (8000934 <GPIO_PeriClkControl+0x10c>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d13c      	bne.n	8000914 <GPIO_PeriClkControl+0xec>
			GPIOE_PCLK_EN();
 800089a:	4b22      	ldr	r3, [pc, #136]	; (8000924 <GPIO_PeriClkControl+0xfc>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	4a21      	ldr	r2, [pc, #132]	; (8000924 <GPIO_PeriClkControl+0xfc>)
 80008a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a4:	6193      	str	r3, [r2, #24]
}
 80008a6:	e035      	b.n	8000914 <GPIO_PeriClkControl+0xec>
		if(pGPIOx == GPIOA)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4a1d      	ldr	r2, [pc, #116]	; (8000920 <GPIO_PeriClkControl+0xf8>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d106      	bne.n	80008be <GPIO_PeriClkControl+0x96>
			GPIOA_PCLK_DI();
 80008b0:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <GPIO_PeriClkControl+0xfc>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	4a1b      	ldr	r2, [pc, #108]	; (8000924 <GPIO_PeriClkControl+0xfc>)
 80008b6:	f023 0304 	bic.w	r3, r3, #4
 80008ba:	6193      	str	r3, [r2, #24]
}
 80008bc:	e02a      	b.n	8000914 <GPIO_PeriClkControl+0xec>
		else if(pGPIOx == GPIOB)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4a19      	ldr	r2, [pc, #100]	; (8000928 <GPIO_PeriClkControl+0x100>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d106      	bne.n	80008d4 <GPIO_PeriClkControl+0xac>
			GPIOB_PCLK_DI();
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <GPIO_PeriClkControl+0xfc>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	4a16      	ldr	r2, [pc, #88]	; (8000924 <GPIO_PeriClkControl+0xfc>)
 80008cc:	f023 0308 	bic.w	r3, r3, #8
 80008d0:	6193      	str	r3, [r2, #24]
}
 80008d2:	e01f      	b.n	8000914 <GPIO_PeriClkControl+0xec>
		else if(pGPIOx == GPIOC)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4a15      	ldr	r2, [pc, #84]	; (800092c <GPIO_PeriClkControl+0x104>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d106      	bne.n	80008ea <GPIO_PeriClkControl+0xc2>
			GPIOC_PCLK_DI();
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <GPIO_PeriClkControl+0xfc>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	4a10      	ldr	r2, [pc, #64]	; (8000924 <GPIO_PeriClkControl+0xfc>)
 80008e2:	f023 0310 	bic.w	r3, r3, #16
 80008e6:	6193      	str	r3, [r2, #24]
}
 80008e8:	e014      	b.n	8000914 <GPIO_PeriClkControl+0xec>
		else if(pGPIOx == GPIOD)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4a10      	ldr	r2, [pc, #64]	; (8000930 <GPIO_PeriClkControl+0x108>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d106      	bne.n	8000900 <GPIO_PeriClkControl+0xd8>
			GPIOD_PCLK_DI();
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <GPIO_PeriClkControl+0xfc>)
 80008f4:	699b      	ldr	r3, [r3, #24]
 80008f6:	4a0b      	ldr	r2, [pc, #44]	; (8000924 <GPIO_PeriClkControl+0xfc>)
 80008f8:	f023 0320 	bic.w	r3, r3, #32
 80008fc:	6193      	str	r3, [r2, #24]
}
 80008fe:	e009      	b.n	8000914 <GPIO_PeriClkControl+0xec>
		else if(pGPIOx == GPIOE)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4a0c      	ldr	r2, [pc, #48]	; (8000934 <GPIO_PeriClkControl+0x10c>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d105      	bne.n	8000914 <GPIO_PeriClkControl+0xec>
			GPIOE_PCLK_DI();
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <GPIO_PeriClkControl+0xfc>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	4a05      	ldr	r2, [pc, #20]	; (8000924 <GPIO_PeriClkControl+0xfc>)
 800090e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000912:	6193      	str	r3, [r2, #24]
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40010800 	.word	0x40010800
 8000924:	40021000 	.word	0x40021000
 8000928:	40010c00 	.word	0x40010c00
 800092c:	40011000 	.word	0x40011000
 8000930:	40011400 	.word	0x40011400
 8000934:	40011800 	.word	0x40011800

08000938 <GPIO_WritePin>:
	return value;
}

//Write to single bit of PORTx
void GPIO_WritePin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t value)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	460b      	mov	r3, r1
 8000942:	70fb      	strb	r3, [r7, #3]
 8000944:	4613      	mov	r3, r2
 8000946:	70bb      	strb	r3, [r7, #2]
	if(value == GPIO_PIN_SET)
 8000948:	78bb      	ldrb	r3, [r7, #2]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d109      	bne.n	8000962 <GPIO_WritePin+0x2a>
	{
		pGPIOx -> ODR |= 1 << PinNumber;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	68db      	ldr	r3, [r3, #12]
 8000952:	78fa      	ldrb	r2, [r7, #3]
 8000954:	2101      	movs	r1, #1
 8000956:	fa01 f202 	lsl.w	r2, r1, r2
 800095a:	431a      	orrs	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	60da      	str	r2, [r3, #12]
	}
	else
	{
		pGPIOx -> ODR &= ~ (1 << PinNumber);
	}
}
 8000960:	e009      	b.n	8000976 <GPIO_WritePin+0x3e>
		pGPIOx -> ODR &= ~ (1 << PinNumber);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	68db      	ldr	r3, [r3, #12]
 8000966:	78fa      	ldrb	r2, [r7, #3]
 8000968:	2101      	movs	r1, #1
 800096a:	fa01 f202 	lsl.w	r2, r1, r2
 800096e:	43d2      	mvns	r2, r2
 8000970:	401a      	ands	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	60da      	str	r2, [r3, #12]
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <GPIO_TogglePin>:
{
	pGPIOx -> ODR = value;
}

void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	70fb      	strb	r3, [r7, #3]
	pGPIOx -> ODR ^= (1 << PinNumber);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	78fa      	ldrb	r2, [r7, #3]
 8000992:	2101      	movs	r1, #1
 8000994:	fa01 f202 	lsl.w	r2, r1, r2
 8000998:	405a      	eors	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	60da      	str	r2, [r3, #12]
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr

080009a8 <LCD_Init>:
 *                     APIs Function Definition for LCD Display
 *******************************************************************************************/


void LCD_Init() // Initialize the LCD
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0

	GPIO_Handle_t lcd_Control, lcd_Data;

/*************** GPIO Clock Enable *********************************************************/

	GPIO_PeriClkControl(LCD_CONTROL_PORT, ENABLE);		// Enable Clock for LCD Control Port
 80009ae:	2101      	movs	r1, #1
 80009b0:	484b      	ldr	r0, [pc, #300]	; (8000ae0 <LCD_Init+0x138>)
 80009b2:	f7ff ff39 	bl	8000828 <GPIO_PeriClkControl>
	GPIO_PeriClkControl(LCD_DATA_PORT, ENABLE);			// Enable Clock for LCD Data Port
 80009b6:	2101      	movs	r1, #1
 80009b8:	4849      	ldr	r0, [pc, #292]	; (8000ae0 <LCD_Init+0x138>)
 80009ba:	f7ff ff35 	bl	8000828 <GPIO_PeriClkControl>
	// If we want them to use as GPIO we need to remap them using AFIO_MAPR register's SWJ_CFG [2:0] bits
	// SWJ_CFG [2:0] = 010; // JTAG-DP Disabled and SW-DP Enabled

	if((LCD_DATA_PORT == GPIOB )&& (LCD_CONTROL_PORT == GPIOB) && ((LCD_D7_PIN == 4) | (LCD_D6_PIN == 4) | (LCD_D5_PIN == 4) | (LCD_D4_PIN == 4) | (LCD_RS_PIN == 4) | (LCD_EN_PIN == 4)))
	{
		AFIO_PCLK_EN();
 80009be:	4b49      	ldr	r3, [pc, #292]	; (8000ae4 <LCD_Init+0x13c>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	4a48      	ldr	r2, [pc, #288]	; (8000ae4 <LCD_Init+0x13c>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6193      	str	r3, [r2, #24]

		AFIO -> MAPR |= 0x02000000;			// GPIO PB4, PB3 and PA15 will be free
 80009ca:	4b47      	ldr	r3, [pc, #284]	; (8000ae8 <LCD_Init+0x140>)
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	4a46      	ldr	r2, [pc, #280]	; (8000ae8 <LCD_Init+0x140>)
 80009d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009d4:	6053      	str	r3, [r2, #4]

/**********************************************************************************************************************************************************************************************/

/*************** GPIO configuration for LCD ************************************************/

	lcd_Control.pGPIOx = LCD_CONTROL_PORT;
 80009d6:	4b42      	ldr	r3, [pc, #264]	; (8000ae0 <LCD_Init+0x138>)
 80009d8:	60bb      	str	r3, [r7, #8]
	lcd_Control.GPIO_PinConfig.GPIO_PinNumber = LCD_RS_PIN;
 80009da:	2309      	movs	r3, #9
 80009dc:	733b      	strb	r3, [r7, #12]
	lcd_Control.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_2MHZ;
 80009de:	2302      	movs	r3, #2
 80009e0:	737b      	strb	r3, [r7, #13]
	lcd_Control.GPIO_PinConfig.GPIO_PinOutInType = GPIO_OP_PP;
 80009e2:	2300      	movs	r3, #0
 80009e4:	73bb      	strb	r3, [r7, #14]
	GPIO_Init(&lcd_Control);
 80009e6:	f107 0308 	add.w	r3, r7, #8
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff fec6 	bl	800077c <GPIO_Init>


	lcd_Control.GPIO_PinConfig.GPIO_PinNumber = LCD_EN_PIN;
 80009f0:	2308      	movs	r3, #8
 80009f2:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&lcd_Control);
 80009f4:	f107 0308 	add.w	r3, r7, #8
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff febf 	bl	800077c <GPIO_Init>

	lcd_Data.pGPIOx = LCD_DATA_PORT;
 80009fe:	4b38      	ldr	r3, [pc, #224]	; (8000ae0 <LCD_Init+0x138>)
 8000a00:	603b      	str	r3, [r7, #0]
	lcd_Data.GPIO_PinConfig.GPIO_PinNumber = LCD_D4_PIN;
 8000a02:	2307      	movs	r3, #7
 8000a04:	713b      	strb	r3, [r7, #4]
	lcd_Data.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_2MHZ;
 8000a06:	2302      	movs	r3, #2
 8000a08:	717b      	strb	r3, [r7, #5]
	lcd_Data.GPIO_PinConfig.GPIO_PinOutInType = GPIO_OP_PP;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(&lcd_Data);
 8000a0e:	463b      	mov	r3, r7
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff feb3 	bl	800077c <GPIO_Init>


	lcd_Data.GPIO_PinConfig.GPIO_PinNumber = LCD_D5_PIN;
 8000a16:	2306      	movs	r3, #6
 8000a18:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&lcd_Data);
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fead 	bl	800077c <GPIO_Init>


	lcd_Data.GPIO_PinConfig.GPIO_PinNumber = LCD_D6_PIN;
 8000a22:	2305      	movs	r3, #5
 8000a24:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&lcd_Data);
 8000a26:	463b      	mov	r3, r7
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff fea7 	bl	800077c <GPIO_Init>


	lcd_Data.GPIO_PinConfig.GPIO_PinNumber = LCD_D7_PIN;
 8000a2e:	2304      	movs	r3, #4
 8000a30:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&lcd_Data);
 8000a32:	463b      	mov	r3, r7
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff fea1 	bl	800077c <GPIO_Init>

	GPIO_WritePin(LCD_CONTROL_PORT, LCD_RS_PIN, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2109      	movs	r1, #9
 8000a3e:	4828      	ldr	r0, [pc, #160]	; (8000ae0 <LCD_Init+0x138>)
 8000a40:	f7ff ff7a 	bl	8000938 <GPIO_WritePin>
	GPIO_WritePin(LCD_CONTROL_PORT, LCD_EN_PIN, GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2108      	movs	r1, #8
 8000a48:	4825      	ldr	r0, [pc, #148]	; (8000ae0 <LCD_Init+0x138>)
 8000a4a:	f7ff ff75 	bl	8000938 <GPIO_WritePin>

	GPIO_WritePin(LCD_DATA_PORT, LCD_D4_PIN, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2107      	movs	r1, #7
 8000a52:	4823      	ldr	r0, [pc, #140]	; (8000ae0 <LCD_Init+0x138>)
 8000a54:	f7ff ff70 	bl	8000938 <GPIO_WritePin>
	GPIO_WritePin(LCD_DATA_PORT, LCD_D5_PIN, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2106      	movs	r1, #6
 8000a5c:	4820      	ldr	r0, [pc, #128]	; (8000ae0 <LCD_Init+0x138>)
 8000a5e:	f7ff ff6b 	bl	8000938 <GPIO_WritePin>
	GPIO_WritePin(LCD_DATA_PORT, LCD_D6_PIN, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2105      	movs	r1, #5
 8000a66:	481e      	ldr	r0, [pc, #120]	; (8000ae0 <LCD_Init+0x138>)
 8000a68:	f7ff ff66 	bl	8000938 <GPIO_WritePin>
	GPIO_WritePin(LCD_DATA_PORT, LCD_D7_PIN, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2104      	movs	r1, #4
 8000a70:	481b      	ldr	r0, [pc, #108]	; (8000ae0 <LCD_Init+0x138>)
 8000a72:	f7ff ff61 	bl	8000938 <GPIO_WritePin>
	lcd_Data.pGPIOx -> BSRR = 1 << LCD_D5_PIN;
	LCD_En_Pulse();*/

/*************** LCD Initialization Sequence ************************************************/

	delay_ms(40);						// Wait for 40 ms LCD initialization after LCD power ON
 8000a76:	2028      	movs	r0, #40	; 0x28
 8000a78:	f000 fa2c 	bl	8000ed4 <delay_ms>

	LCD_Write(0x03, CMD);				// Send 0x03;
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2003      	movs	r0, #3
 8000a80:	f000 f870 	bl	8000b64 <LCD_Write>

	delay_ms(5);						// Wait for 5 ms
 8000a84:	2005      	movs	r0, #5
 8000a86:	f000 fa25 	bl	8000ed4 <delay_ms>

	LCD_Write(0x03, CMD);				// again Send 0x03
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	2003      	movs	r0, #3
 8000a8e:	f000 f869 	bl	8000b64 <LCD_Write>

	delay_us(150);						// wait for 100 us
 8000a92:	2096      	movs	r0, #150	; 0x96
 8000a94:	f000 fa3c 	bl	8000f10 <delay_us>

	LCD_Write(0x03, CMD);				// again Send 0x03;
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2003      	movs	r0, #3
 8000a9c:	f000 f862 	bl	8000b64 <LCD_Write>

	LCD_Write(0x02, CMD);				// Send 0x02;
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	2002      	movs	r0, #2
 8000aa4:	f000 f85e 	bl	8000b64 <LCD_Write>

	//LCD_Write(LCD_4BITMODEDL, CMD);		// Configure LCD in 4-Bit Mode (0x28)
	LCD_Write(LCD_4BIT_5X8_2LINE, CMD);
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2028      	movs	r0, #40	; 0x28
 8000aac:	f000 f85a 	bl	8000b64 <LCD_Write>

	//LCD_Write(LCD_DisCurBlink, CMD);	//	Display ON, Cursor ON, Blink ON
	LCD_Write(LCD_DISPLAY_ON_CURSOR_ON, CMD);
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	200e      	movs	r0, #14
 8000ab4:	f000 f856 	bl	8000b64 <LCD_Write>

	LCD_Write(LCD_CLEAR_DISPLAY, CMD);	// Clear the display
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2001      	movs	r0, #1
 8000abc:	f000 f852 	bl	8000b64 <LCD_Write>

	delay_ms(2);						// After clear cmd wait for 2 ms
 8000ac0:	2002      	movs	r0, #2
 8000ac2:	f000 fa07 	bl	8000ed4 <delay_ms>

	//LCD_Write(LCD_INCCurNoShift, CMD);	//  Increment the Cursor
	LCD_Write(LCD_INC_SHIFT_OFF, CMD);
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	2006      	movs	r0, #6
 8000aca:	f000 f84b 	bl	8000b64 <LCD_Write>

	//LCD_Write(LCD_CurPosition, CMD);	//  Initial Cursor Position 0th position @ Line 1
	LCD_Write(LCD_ROW0COL0_ADDR, CMD);
 8000ace:	2100      	movs	r1, #0
 8000ad0:	2080      	movs	r0, #128	; 0x80
 8000ad2:	f000 f847 	bl	8000b64 <LCD_Write>


/*********************************************************************************************/

}
 8000ad6:	bf00      	nop
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40010c00 	.word	0x40010c00
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	40010000 	.word	0x40010000

08000aec <LCD_Display_Scroll>:
  * @param	RIGHT or LEFT
  * @retval	None
  ******************************************************************************
  */
void LCD_Display_Scroll(uint8_t direction)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
	if(direction == 1)
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d104      	bne.n	8000b06 <LCD_Display_Scroll+0x1a>
	{
		LCD_Write(LCD_DISPLAY_SHIFT_RIGHT, CMD);
 8000afc:	2100      	movs	r1, #0
 8000afe:	201c      	movs	r0, #28
 8000b00:	f000 f830 	bl	8000b64 <LCD_Write>
	else
	{
		LCD_Write(LCD_DISPLAY_SHIFT_LEFT, CMD);
	}

}
 8000b04:	e003      	b.n	8000b0e <LCD_Display_Scroll+0x22>
		LCD_Write(LCD_DISPLAY_SHIFT_LEFT, CMD);
 8000b06:	2100      	movs	r1, #0
 8000b08:	2018      	movs	r0, #24
 8000b0a:	f000 f82b 	bl	8000b64 <LCD_Write>
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <LCD_Clear>:
  * @param	None
  * @retval	None
  ******************************************************************************
  */
void LCD_Clear(void)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	af00      	add	r7, sp, #0

	LCD_Write(LCD_CLEAR_DISPLAY, CMD);
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	f000 f821 	bl	8000b64 <LCD_Write>

	delay_ms(2);						// After clear cmd wait for 2 ms
 8000b22:	2002      	movs	r0, #2
 8000b24:	f000 f9d6 	bl	8000ed4 <delay_ms>

}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <LCD_SetCursor>:
  * @retval	None
  ******************************************************************************
  */

void LCD_SetCursor(uint8_t row, uint8_t col)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	460a      	mov	r2, r1
 8000b36:	71fb      	strb	r3, [r7, #7]
 8000b38:	4613      	mov	r3, r2
 8000b3a:	71bb      	strb	r3, [r7, #6]

		LCD_Write(LCD_ROW0COL0_ADDR + col,CMD);

	#elif LCD_ROWS == 2

		if(row == 0)
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d103      	bne.n	8000b4a <LCD_SetCursor+0x1e>
		{
			col = col + LCD_ROW0COL0_ADDR;
 8000b42:	79bb      	ldrb	r3, [r7, #6]
 8000b44:	3b80      	subs	r3, #128	; 0x80
 8000b46:	71bb      	strb	r3, [r7, #6]
 8000b48:	e002      	b.n	8000b50 <LCD_SetCursor+0x24>
		}
		else
		{
			col = col + LCD_ROW1COL0_ADDR;
 8000b4a:	79bb      	ldrb	r3, [r7, #6]
 8000b4c:	3b40      	subs	r3, #64	; 0x40
 8000b4e:	71bb      	strb	r3, [r7, #6]
		}

		LCD_Write(col,CMD);
 8000b50:	79bb      	ldrb	r3, [r7, #6]
 8000b52:	2100      	movs	r1, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f000 f805 	bl	8000b64 <LCD_Write>

		LCD_Write(col,CMD);

	#endif

}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <LCD_Write>:
  * @retval	None
  ******************************************************************************
  */

static void LCD_Write(uint8_t data, uint8_t rs)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	460a      	mov	r2, r1
 8000b6e:	71fb      	strb	r3, [r7, #7]
 8000b70:	4613      	mov	r3, r2
 8000b72:	71bb      	strb	r3, [r7, #6]
	/* RS = 0 (CMD) for commands
	 * RS = 1 (DATA) for Data
	 */

	//lcd_Control.pGPIOx -> BRR = (1 << LCD_D4_PIN) | (1 << LCD_D5_PIN) | (1 << LCD_D6_PIN) | (1 << LCD_D7_PIN); // Clear all Data lines of LCD
	GPIO_WritePin(LCD_DATA_PORT, LCD_D4_PIN, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2107      	movs	r1, #7
 8000b78:	4845      	ldr	r0, [pc, #276]	; (8000c90 <LCD_Write+0x12c>)
 8000b7a:	f7ff fedd 	bl	8000938 <GPIO_WritePin>
	GPIO_WritePin(LCD_DATA_PORT, LCD_D5_PIN, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2106      	movs	r1, #6
 8000b82:	4843      	ldr	r0, [pc, #268]	; (8000c90 <LCD_Write+0x12c>)
 8000b84:	f7ff fed8 	bl	8000938 <GPIO_WritePin>
	GPIO_WritePin(LCD_DATA_PORT, LCD_D6_PIN, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2105      	movs	r1, #5
 8000b8c:	4840      	ldr	r0, [pc, #256]	; (8000c90 <LCD_Write+0x12c>)
 8000b8e:	f7ff fed3 	bl	8000938 <GPIO_WritePin>
	GPIO_WritePin(LCD_DATA_PORT, LCD_D7_PIN, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2104      	movs	r1, #4
 8000b96:	483e      	ldr	r0, [pc, #248]	; (8000c90 <LCD_Write+0x12c>)
 8000b98:	f7ff fece 	bl	8000938 <GPIO_WritePin>

	// Send Higher Nibble of Data First
	if(data & 0x80)
 8000b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	da04      	bge.n	8000bae <LCD_Write+0x4a>
		//lcd_Data.pGPIOx -> BSRR = 1 << LCD_D7_PIN;
		GPIO_WritePin(LCD_DATA_PORT, LCD_D7_PIN, GPIO_PIN_SET);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	2104      	movs	r1, #4
 8000ba8:	4839      	ldr	r0, [pc, #228]	; (8000c90 <LCD_Write+0x12c>)
 8000baa:	f7ff fec5 	bl	8000938 <GPIO_WritePin>
	if(data & 0x40)
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d004      	beq.n	8000bc2 <LCD_Write+0x5e>
		//lcd_Data.pGPIOx -> BSRR = 1 << LCD_D6_PIN;
		GPIO_WritePin(LCD_DATA_PORT, LCD_D6_PIN, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2105      	movs	r1, #5
 8000bbc:	4834      	ldr	r0, [pc, #208]	; (8000c90 <LCD_Write+0x12c>)
 8000bbe:	f7ff febb 	bl	8000938 <GPIO_WritePin>
	if(data & 0x20)
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	f003 0320 	and.w	r3, r3, #32
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d004      	beq.n	8000bd6 <LCD_Write+0x72>
		//lcd_Data.pGPIOx -> BSRR = 1 << LCD_D5_PIN;
		GPIO_WritePin(LCD_DATA_PORT, LCD_D5_PIN, GPIO_PIN_SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2106      	movs	r1, #6
 8000bd0:	482f      	ldr	r0, [pc, #188]	; (8000c90 <LCD_Write+0x12c>)
 8000bd2:	f7ff feb1 	bl	8000938 <GPIO_WritePin>
	if(data & 0x10)
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	f003 0310 	and.w	r3, r3, #16
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d004      	beq.n	8000bea <LCD_Write+0x86>
		//lcd_Data.pGPIOx -> BSRR = 1 << LCD_D4_PIN;
		GPIO_WritePin(LCD_DATA_PORT, LCD_D4_PIN, GPIO_PIN_SET);
 8000be0:	2201      	movs	r2, #1
 8000be2:	2107      	movs	r1, #7
 8000be4:	482a      	ldr	r0, [pc, #168]	; (8000c90 <LCD_Write+0x12c>)
 8000be6:	f7ff fea7 	bl	8000938 <GPIO_WritePin>

    // Write to LCD RS Pin for Data/Command
	if(rs == DATA)
 8000bea:	79bb      	ldrb	r3, [r7, #6]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d105      	bne.n	8000bfc <LCD_Write+0x98>
	{
		//lcd_Control.pGPIOx -> BSRR = 1 << LCD_RS_PIN;
		GPIO_WritePin(LCD_CONTROL_PORT, LCD_RS_PIN, GPIO_PIN_SET);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2109      	movs	r1, #9
 8000bf4:	4826      	ldr	r0, [pc, #152]	; (8000c90 <LCD_Write+0x12c>)
 8000bf6:	f7ff fe9f 	bl	8000938 <GPIO_WritePin>
 8000bfa:	e004      	b.n	8000c06 <LCD_Write+0xa2>
	}
	else
	{
		//lcd_Control.pGPIOx -> BRR = 1 << LCD_RS_PIN;
		GPIO_WritePin(LCD_CONTROL_PORT, LCD_RS_PIN, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2109      	movs	r1, #9
 8000c00:	4823      	ldr	r0, [pc, #140]	; (8000c90 <LCD_Write+0x12c>)
 8000c02:	f7ff fe99 	bl	8000938 <GPIO_WritePin>
	}

	LCD_En_Pulse();
 8000c06:	f000 f845 	bl	8000c94 <LCD_En_Pulse>

	//lcd_Control.pGPIOx -> BRR = (1 << LCD_D4_PIN) | (1 << LCD_D5_PIN) | (1 << LCD_D6_PIN) | (1 << LCD_D7_PIN); // Clear all Data lines of LCD

	GPIO_WritePin(LCD_DATA_PORT, LCD_D4_PIN, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2107      	movs	r1, #7
 8000c0e:	4820      	ldr	r0, [pc, #128]	; (8000c90 <LCD_Write+0x12c>)
 8000c10:	f7ff fe92 	bl	8000938 <GPIO_WritePin>
	GPIO_WritePin(LCD_DATA_PORT, LCD_D5_PIN, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2106      	movs	r1, #6
 8000c18:	481d      	ldr	r0, [pc, #116]	; (8000c90 <LCD_Write+0x12c>)
 8000c1a:	f7ff fe8d 	bl	8000938 <GPIO_WritePin>
	GPIO_WritePin(LCD_DATA_PORT, LCD_D6_PIN, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2105      	movs	r1, #5
 8000c22:	481b      	ldr	r0, [pc, #108]	; (8000c90 <LCD_Write+0x12c>)
 8000c24:	f7ff fe88 	bl	8000938 <GPIO_WritePin>
	GPIO_WritePin(LCD_DATA_PORT, LCD_D7_PIN, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2104      	movs	r1, #4
 8000c2c:	4818      	ldr	r0, [pc, #96]	; (8000c90 <LCD_Write+0x12c>)
 8000c2e:	f7ff fe83 	bl	8000938 <GPIO_WritePin>

	// Send Lower Nibble of Data First
	if(data & 0x08)
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	f003 0308 	and.w	r3, r3, #8
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d004      	beq.n	8000c46 <LCD_Write+0xe2>
		//lcd_Data.pGPIOx -> BSRR = 1 << LCD_D7_PIN;
		GPIO_WritePin(LCD_DATA_PORT, LCD_D7_PIN, GPIO_PIN_SET);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2104      	movs	r1, #4
 8000c40:	4813      	ldr	r0, [pc, #76]	; (8000c90 <LCD_Write+0x12c>)
 8000c42:	f7ff fe79 	bl	8000938 <GPIO_WritePin>
	if(data & 0x04)
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	f003 0304 	and.w	r3, r3, #4
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d004      	beq.n	8000c5a <LCD_Write+0xf6>
		//lcd_Data.pGPIOx -> BSRR = 1 << LCD_D6_PIN;
		GPIO_WritePin(LCD_DATA_PORT, LCD_D6_PIN, GPIO_PIN_SET);
 8000c50:	2201      	movs	r2, #1
 8000c52:	2105      	movs	r1, #5
 8000c54:	480e      	ldr	r0, [pc, #56]	; (8000c90 <LCD_Write+0x12c>)
 8000c56:	f7ff fe6f 	bl	8000938 <GPIO_WritePin>
	if(data & 0x02)
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	f003 0302 	and.w	r3, r3, #2
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d004      	beq.n	8000c6e <LCD_Write+0x10a>
		//lcd_Data.pGPIOx -> BSRR = 1 << LCD_D5_PIN;
		GPIO_WritePin(LCD_DATA_PORT, LCD_D5_PIN, GPIO_PIN_SET);
 8000c64:	2201      	movs	r2, #1
 8000c66:	2106      	movs	r1, #6
 8000c68:	4809      	ldr	r0, [pc, #36]	; (8000c90 <LCD_Write+0x12c>)
 8000c6a:	f7ff fe65 	bl	8000938 <GPIO_WritePin>
	if(data & 0x01)
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d004      	beq.n	8000c82 <LCD_Write+0x11e>
		//lcd_Data.pGPIOx -> BSRR = 1 << LCD_D4_PIN;
		GPIO_WritePin(LCD_DATA_PORT, LCD_D4_PIN, GPIO_PIN_SET);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2107      	movs	r1, #7
 8000c7c:	4804      	ldr	r0, [pc, #16]	; (8000c90 <LCD_Write+0x12c>)
 8000c7e:	f7ff fe5b 	bl	8000938 <GPIO_WritePin>

	LCD_En_Pulse();
 8000c82:	f000 f807 	bl	8000c94 <LCD_En_Pulse>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40010c00 	.word	0x40010c00

08000c94 <LCD_En_Pulse>:

static void LCD_En_Pulse()
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	//lcd_Control.pGPIOx -> BSRR = 1 << LCD_EN_PIN;
	GPIO_WritePin(LCD_CONTROL_PORT, LCD_EN_PIN, GPIO_PIN_SET);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2108      	movs	r1, #8
 8000c9c:	4807      	ldr	r0, [pc, #28]	; (8000cbc <LCD_En_Pulse+0x28>)
 8000c9e:	f7ff fe4b 	bl	8000938 <GPIO_WritePin>
	delay_ms(1);
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f000 f916 	bl	8000ed4 <delay_ms>

	//lcd_Control.pGPIOx -> BRR = 1 << LCD_EN_PIN;
	GPIO_WritePin(LCD_CONTROL_PORT, LCD_EN_PIN, GPIO_PIN_RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2108      	movs	r1, #8
 8000cac:	4803      	ldr	r0, [pc, #12]	; (8000cbc <LCD_En_Pulse+0x28>)
 8000cae:	f7ff fe43 	bl	8000938 <GPIO_WritePin>
	delay_ms(2);
 8000cb2:	2002      	movs	r0, #2
 8000cb4:	f000 f90e 	bl	8000ed4 <delay_ms>

}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40010c00 	.word	0x40010c00

08000cc0 <LCD_WriteChar>:
  * @param	Character to display
  * @retval	None
  ******************************************************************************
*/
void LCD_WriteChar(uint8_t character)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
	LCD_Write(character, DATA);
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2101      	movs	r1, #1
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff ff48 	bl	8000b64 <LCD_Write>
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <LCD_WriteString>:
  * @param	String to display
  * @retval	None
  ******************************************************************************
*/
void LCD_WriteString(const char* string)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	while(*string)
 8000ce4:	e009      	b.n	8000cfa <LCD_WriteString+0x1e>
	{
		LCD_WriteChar(*string++);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	1c5a      	adds	r2, r3, #1
 8000cea:	607a      	str	r2, [r7, #4]
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ffe6 	bl	8000cc0 <LCD_WriteChar>
		delay_ms(1);
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	f000 f8ed 	bl	8000ed4 <delay_ms>
	while(*string)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1f1      	bne.n	8000ce6 <LCD_WriteString+0xa>
	}
}
 8000d02:	bf00      	nop
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <LCD_WriteInteger>:
  * @param	Integer to display
  * @retval	None
  ******************************************************************************
*/
void LCD_WriteInteger(uint16_t intvalue)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	80fb      	strh	r3, [r7, #6]
	uint8_t i = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	73fb      	strb	r3, [r7, #15]

	if(intvalue > 999 && intvalue <= 9999)
 8000d1a:	88fb      	ldrh	r3, [r7, #6]
 8000d1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d20:	d35a      	bcc.n	8000dd8 <LCD_WriteInteger+0xcc>
 8000d22:	88fb      	ldrh	r3, [r7, #6]
 8000d24:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d855      	bhi.n	8000dd8 <LCD_WriteInteger+0xcc>
	{
		i = intvalue / 1000;		// divide 4-digit value by 1000 gives thousand's place integer
 8000d2c:	88fb      	ldrh	r3, [r7, #6]
 8000d2e:	4a66      	ldr	r2, [pc, #408]	; (8000ec8 <LCD_WriteInteger+0x1bc>)
 8000d30:	fba2 2303 	umull	r2, r3, r2, r3
 8000d34:	099b      	lsrs	r3, r3, #6
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	73fb      	strb	r3, [r7, #15]
		LCD_WriteChar(i + 48);
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	3330      	adds	r3, #48	; 0x30
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ffbd 	bl	8000cc0 <LCD_WriteChar>

		i = (intvalue / 100) % 10;	// Hundred's place Integer
 8000d46:	88fb      	ldrh	r3, [r7, #6]
 8000d48:	4a60      	ldr	r2, [pc, #384]	; (8000ecc <LCD_WriteInteger+0x1c0>)
 8000d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4e:	095b      	lsrs	r3, r3, #5
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	4b5f      	ldr	r3, [pc, #380]	; (8000ed0 <LCD_WriteInteger+0x1c4>)
 8000d54:	fba3 1302 	umull	r1, r3, r3, r2
 8000d58:	08d9      	lsrs	r1, r3, #3
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	440b      	add	r3, r1
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	73fb      	strb	r3, [r7, #15]
		LCD_WriteChar(i + 48);
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
 8000d6a:	3330      	adds	r3, #48	; 0x30
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff ffa6 	bl	8000cc0 <LCD_WriteChar>

		i = (intvalue % 100) / 10;	// Ten's place Integer
 8000d74:	88fb      	ldrh	r3, [r7, #6]
 8000d76:	4a55      	ldr	r2, [pc, #340]	; (8000ecc <LCD_WriteInteger+0x1c0>)
 8000d78:	fba2 1203 	umull	r1, r2, r2, r3
 8000d7c:	0952      	lsrs	r2, r2, #5
 8000d7e:	2164      	movs	r1, #100	; 0x64
 8000d80:	fb01 f202 	mul.w	r2, r1, r2
 8000d84:	1a9b      	subs	r3, r3, r2
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	4a51      	ldr	r2, [pc, #324]	; (8000ed0 <LCD_WriteInteger+0x1c4>)
 8000d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8e:	08db      	lsrs	r3, r3, #3
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	73fb      	strb	r3, [r7, #15]
		LCD_WriteChar(i + 48);
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	3330      	adds	r3, #48	; 0x30
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff ff90 	bl	8000cc0 <LCD_WriteChar>

		i = (intvalue % 100) % 10;	// One's place Integer
 8000da0:	88fb      	ldrh	r3, [r7, #6]
 8000da2:	4a4a      	ldr	r2, [pc, #296]	; (8000ecc <LCD_WriteInteger+0x1c0>)
 8000da4:	fba2 1203 	umull	r1, r2, r2, r3
 8000da8:	0952      	lsrs	r2, r2, #5
 8000daa:	2164      	movs	r1, #100	; 0x64
 8000dac:	fb01 f202 	mul.w	r2, r1, r2
 8000db0:	1a9b      	subs	r3, r3, r2
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	4b46      	ldr	r3, [pc, #280]	; (8000ed0 <LCD_WriteInteger+0x1c4>)
 8000db6:	fba3 1302 	umull	r1, r3, r3, r2
 8000dba:	08d9      	lsrs	r1, r3, #3
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	73fb      	strb	r3, [r7, #15]
		LCD_WriteChar(i + 48);
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	3330      	adds	r3, #48	; 0x30
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff75 	bl	8000cc0 <LCD_WriteChar>
 8000dd6:	e073      	b.n	8000ec0 <LCD_WriteInteger+0x1b4>
	}
	else if(intvalue > 99 && intvalue <= 999)
 8000dd8:	88fb      	ldrh	r3, [r7, #6]
 8000dda:	2b63      	cmp	r3, #99	; 0x63
 8000ddc:	d942      	bls.n	8000e64 <LCD_WriteInteger+0x158>
 8000dde:	88fb      	ldrh	r3, [r7, #6]
 8000de0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000de4:	d23e      	bcs.n	8000e64 <LCD_WriteInteger+0x158>
	{

		i = intvalue / 100;	// Hundred's place Integer
 8000de6:	88fb      	ldrh	r3, [r7, #6]
 8000de8:	4a38      	ldr	r2, [pc, #224]	; (8000ecc <LCD_WriteInteger+0x1c0>)
 8000dea:	fba2 2303 	umull	r2, r3, r2, r3
 8000dee:	095b      	lsrs	r3, r3, #5
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	73fb      	strb	r3, [r7, #15]
		LCD_WriteChar(i + 48);
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	3330      	adds	r3, #48	; 0x30
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff ff60 	bl	8000cc0 <LCD_WriteChar>

		i = (intvalue % 100) / 10;	// Ten's place Integer
 8000e00:	88fb      	ldrh	r3, [r7, #6]
 8000e02:	4a32      	ldr	r2, [pc, #200]	; (8000ecc <LCD_WriteInteger+0x1c0>)
 8000e04:	fba2 1203 	umull	r1, r2, r2, r3
 8000e08:	0952      	lsrs	r2, r2, #5
 8000e0a:	2164      	movs	r1, #100	; 0x64
 8000e0c:	fb01 f202 	mul.w	r2, r1, r2
 8000e10:	1a9b      	subs	r3, r3, r2
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	4a2e      	ldr	r2, [pc, #184]	; (8000ed0 <LCD_WriteInteger+0x1c4>)
 8000e16:	fba2 2303 	umull	r2, r3, r2, r3
 8000e1a:	08db      	lsrs	r3, r3, #3
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	73fb      	strb	r3, [r7, #15]
		LCD_WriteChar(i + 48);
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	3330      	adds	r3, #48	; 0x30
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ff4a 	bl	8000cc0 <LCD_WriteChar>

		i = (intvalue % 100) % 10;	// One's place Integer
 8000e2c:	88fb      	ldrh	r3, [r7, #6]
 8000e2e:	4a27      	ldr	r2, [pc, #156]	; (8000ecc <LCD_WriteInteger+0x1c0>)
 8000e30:	fba2 1203 	umull	r1, r2, r2, r3
 8000e34:	0952      	lsrs	r2, r2, #5
 8000e36:	2164      	movs	r1, #100	; 0x64
 8000e38:	fb01 f202 	mul.w	r2, r1, r2
 8000e3c:	1a9b      	subs	r3, r3, r2
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	4b23      	ldr	r3, [pc, #140]	; (8000ed0 <LCD_WriteInteger+0x1c4>)
 8000e42:	fba3 1302 	umull	r1, r3, r3, r2
 8000e46:	08d9      	lsrs	r1, r3, #3
 8000e48:	460b      	mov	r3, r1
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	73fb      	strb	r3, [r7, #15]
		LCD_WriteChar(i + 48);
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	3330      	adds	r3, #48	; 0x30
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff2f 	bl	8000cc0 <LCD_WriteChar>
 8000e62:	e02d      	b.n	8000ec0 <LCD_WriteInteger+0x1b4>
	}
	else if(intvalue > 9 && intvalue <= 99)
 8000e64:	88fb      	ldrh	r3, [r7, #6]
 8000e66:	2b09      	cmp	r3, #9
 8000e68:	d922      	bls.n	8000eb0 <LCD_WriteInteger+0x1a4>
 8000e6a:	88fb      	ldrh	r3, [r7, #6]
 8000e6c:	2b63      	cmp	r3, #99	; 0x63
 8000e6e:	d81f      	bhi.n	8000eb0 <LCD_WriteInteger+0x1a4>
	{

		i = intvalue / 10;			// Ten's place Integer
 8000e70:	88fb      	ldrh	r3, [r7, #6]
 8000e72:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <LCD_WriteInteger+0x1c4>)
 8000e74:	fba2 2303 	umull	r2, r3, r2, r3
 8000e78:	08db      	lsrs	r3, r3, #3
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	73fb      	strb	r3, [r7, #15]
		LCD_WriteChar(i + 48);
 8000e7e:	7bfb      	ldrb	r3, [r7, #15]
 8000e80:	3330      	adds	r3, #48	; 0x30
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff1b 	bl	8000cc0 <LCD_WriteChar>

		i = intvalue % 10;			// One's place Integer
 8000e8a:	88fa      	ldrh	r2, [r7, #6]
 8000e8c:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <LCD_WriteInteger+0x1c4>)
 8000e8e:	fba3 1302 	umull	r1, r3, r3, r2
 8000e92:	08d9      	lsrs	r1, r3, #3
 8000e94:	460b      	mov	r3, r1
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	440b      	add	r3, r1
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	73fb      	strb	r3, [r7, #15]
		LCD_WriteChar(i + 48);
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
 8000ea4:	3330      	adds	r3, #48	; 0x30
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff09 	bl	8000cc0 <LCD_WriteChar>
 8000eae:	e007      	b.n	8000ec0 <LCD_WriteInteger+0x1b4>
	}
	else
	{
		LCD_WriteChar(intvalue + 48);
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	3330      	adds	r3, #48	; 0x30
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff01 	bl	8000cc0 <LCD_WriteChar>
	}

}
 8000ebe:	bf00      	nop
 8000ec0:	bf00      	nop
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	10624dd3 	.word	0x10624dd3
 8000ecc:	51eb851f 	.word	0x51eb851f
 8000ed0:	cccccccd 	.word	0xcccccccd

08000ed4 <delay_ms>:
  * @param	time in ms
  * @retval	None
  ******************************************************************************
*/
void delay_ms(uint32_t ms)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	uint32_t delay = ms * 668;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f44f 7227 	mov.w	r2, #668	; 0x29c
 8000ee2:	fb02 f303 	mul.w	r3, r2, r3
 8000ee6:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < delay; i++)  // 325000 = 500 msec rough estimation
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	e003      	b.n	8000ef6 <delay_ms+0x22>
		__asm__("nop");
 8000eee:	bf00      	nop
	for (int i = 0; i < delay; i++)  // 325000 = 500 msec rough estimation
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	68ba      	ldr	r2, [r7, #8]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d8f7      	bhi.n	8000eee <delay_ms+0x1a>
}
 8000efe:	bf00      	nop
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr
 8000f0a:	0000      	movs	r0, r0
 8000f0c:	0000      	movs	r0, r0
	...

08000f10 <delay_us>:
  * @param	time in ms
  * @retval	None
  ******************************************************************************
*/
void delay_us(uint32_t us)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	uint32_t delay = (us * 0.668) + 1;
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff fb95 	bl	8000648 <__aeabi_ui2d>
 8000f1e:	a314      	add	r3, pc, #80	; (adr r3, 8000f70 <delay_us+0x60>)
 8000f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f24:	f7ff f924 	bl	8000170 <__aeabi_dmul>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f04f 0200 	mov.w	r2, #0
 8000f34:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <delay_us+0x68>)
 8000f36:	f7ff fa4b 	bl	80003d0 <__adddf3>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	4610      	mov	r0, r2
 8000f40:	4619      	mov	r1, r3
 8000f42:	f7ff fbfb 	bl	800073c <__aeabi_d2uiz>
 8000f46:	4603      	mov	r3, r0
 8000f48:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < delay; i++)  // 325000 = 500 msec rough estimation
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	e003      	b.n	8000f58 <delay_us+0x48>
		__asm__("nop");
 8000f50:	bf00      	nop
	for (int i = 0; i < delay; i++)  // 325000 = 500 msec rough estimation
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	3301      	adds	r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d8f7      	bhi.n	8000f50 <delay_us+0x40>
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	f3af 8000 	nop.w
 8000f70:	89374bc7 	.word	0x89374bc7
 8000f74:	3fe56041 	.word	0x3fe56041
 8000f78:	3ff00000 	.word	0x3ff00000

08000f7c <main>:
#include "STM32f103xx_lcd_driver.h"			// including LCD Driver

#include <stdint.h>

int main(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0

	uint16_t i = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	81fb      	strh	r3, [r7, #14]

	//GPIO_DeInit(GPIOB);

	GPIO_PeriClkControl(GPIOC, ENABLE);
 8000f86:	2101      	movs	r1, #1
 8000f88:	4839      	ldr	r0, [pc, #228]	; (8001070 <main+0xf4>)
 8000f8a:	f7ff fc4d 	bl	8000828 <GPIO_PeriClkControl>

	GPIO_Handle_t redled;

	redled.pGPIOx = GPIOC; //GPIOB
 8000f8e:	4b38      	ldr	r3, [pc, #224]	; (8001070 <main+0xf4>)
 8000f90:	607b      	str	r3, [r7, #4]
	redled.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13; //GPIO_PIN_NO_15;
 8000f92:	230d      	movs	r3, #13
 8000f94:	723b      	strb	r3, [r7, #8]
	redled.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_2MHZ;
 8000f96:	2302      	movs	r3, #2
 8000f98:	727b      	strb	r3, [r7, #9]
	redled.GPIO_PinConfig.GPIO_PinOutInType = GPIO_OP_PP;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	72bb      	strb	r3, [r7, #10]

	GPIO_Init(&redled);
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fbeb 	bl	800077c <GPIO_Init>

	GPIO_WritePin(GPIOC, GPIO_PIN_NO_13, GPIO_PIN_SET);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	210d      	movs	r1, #13
 8000faa:	4831      	ldr	r0, [pc, #196]	; (8001070 <main+0xf4>)
 8000fac:	f7ff fcc4 	bl	8000938 <GPIO_WritePin>


	LCD_Init();
 8000fb0:	f7ff fcfa 	bl	80009a8 <LCD_Init>

	//LCD_Clear();

	LCD_SetCursor(0,0);
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f7ff fdb8 	bl	8000b2c <LCD_SetCursor>

	LCD_WriteString(" Ashish ");
 8000fbc:	482d      	ldr	r0, [pc, #180]	; (8001074 <main+0xf8>)
 8000fbe:	f7ff fe8d 	bl	8000cdc <LCD_WriteString>

	LCD_SetCursor(1,0);		// Set Cursor to line 1, position 0 (or row 1 and col 0)
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f7ff fdb1 	bl	8000b2c <LCD_SetCursor>

	LCD_WriteString("Workbench");
 8000fca:	482b      	ldr	r0, [pc, #172]	; (8001078 <main+0xfc>)
 8000fcc:	f7ff fe86 	bl	8000cdc <LCD_WriteString>

	delay_ms(2000);
 8000fd0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fd4:	f7ff ff7e 	bl	8000ed4 <delay_ms>

	//******************* Scroll Display Right than Left ***************

	for(i=0;i<7;i++)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	81fb      	strh	r3, [r7, #14]
 8000fdc:	e009      	b.n	8000ff2 <main+0x76>
	{
		LCD_Display_Scroll(RIGHT);
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f7ff fd84 	bl	8000aec <LCD_Display_Scroll>
		delay_ms(400);
 8000fe4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000fe8:	f7ff ff74 	bl	8000ed4 <delay_ms>
	for(i=0;i<7;i++)
 8000fec:	89fb      	ldrh	r3, [r7, #14]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	81fb      	strh	r3, [r7, #14]
 8000ff2:	89fb      	ldrh	r3, [r7, #14]
 8000ff4:	2b06      	cmp	r3, #6
 8000ff6:	d9f2      	bls.n	8000fde <main+0x62>

	}
	for(i=0;i<7;i++)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	81fb      	strh	r3, [r7, #14]
 8000ffc:	e009      	b.n	8001012 <main+0x96>
	{
		LCD_Display_Scroll(LEFT);
 8000ffe:	2000      	movs	r0, #0
 8001000:	f7ff fd74 	bl	8000aec <LCD_Display_Scroll>
		delay_ms(400);
 8001004:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001008:	f7ff ff64 	bl	8000ed4 <delay_ms>
	for(i=0;i<7;i++)
 800100c:	89fb      	ldrh	r3, [r7, #14]
 800100e:	3301      	adds	r3, #1
 8001010:	81fb      	strh	r3, [r7, #14]
 8001012:	89fb      	ldrh	r3, [r7, #14]
 8001014:	2b06      	cmp	r3, #6
 8001016:	d9f2      	bls.n	8000ffe <main+0x82>

	}
	//*********************************************************************

	delay_ms(4000);
 8001018:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800101c:	f7ff ff5a 	bl	8000ed4 <delay_ms>

	LCD_Clear();
 8001020:	f7ff fd79 	bl	8000b16 <LCD_Clear>
	LCD_SetCursor(0,0);
 8001024:	2100      	movs	r1, #0
 8001026:	2000      	movs	r0, #0
 8001028:	f7ff fd80 	bl	8000b2c <LCD_SetCursor>
	LCD_WriteString("Counting..");
 800102c:	4813      	ldr	r0, [pc, #76]	; (800107c <main+0x100>)
 800102e:	f7ff fe55 	bl	8000cdc <LCD_WriteString>


    /* Loop forever */
	while(1)
	{
		for(i=0; i<10000; i++)
 8001032:	2300      	movs	r3, #0
 8001034:	81fb      	strh	r3, [r7, #14]
 8001036:	e012      	b.n	800105e <main+0xe2>
		{
			LCD_SetCursor(1,0);
 8001038:	2100      	movs	r1, #0
 800103a:	2001      	movs	r0, #1
 800103c:	f7ff fd76 	bl	8000b2c <LCD_SetCursor>
			GPIO_TogglePin(GPIOC, GPIO_PIN_NO_13);
 8001040:	210d      	movs	r1, #13
 8001042:	480b      	ldr	r0, [pc, #44]	; (8001070 <main+0xf4>)
 8001044:	f7ff fc9c 	bl	8000980 <GPIO_TogglePin>
			LCD_WriteInteger(i);
 8001048:	89fb      	ldrh	r3, [r7, #14]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fe5e 	bl	8000d0c <LCD_WriteInteger>
			delay_ms(300);
 8001050:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001054:	f7ff ff3e 	bl	8000ed4 <delay_ms>
		for(i=0; i<10000; i++)
 8001058:	89fb      	ldrh	r3, [r7, #14]
 800105a:	3301      	adds	r3, #1
 800105c:	81fb      	strh	r3, [r7, #14]
 800105e:	89fb      	ldrh	r3, [r7, #14]
 8001060:	f242 720f 	movw	r2, #9999	; 0x270f
 8001064:	4293      	cmp	r3, r2
 8001066:	d9e7      	bls.n	8001038 <main+0xbc>
		}
		LCD_Clear();	// clear the LCD
 8001068:	f7ff fd55 	bl	8000b16 <LCD_Clear>
		for(i=0; i<10000; i++)
 800106c:	e7e1      	b.n	8001032 <main+0xb6>
 800106e:	bf00      	nop
 8001070:	40011000 	.word	0x40011000
 8001074:	08001134 	.word	0x08001134
 8001078:	08001140 	.word	0x08001140
 800107c:	0800114c 	.word	0x0800114c

08001080 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001080:	480d      	ldr	r0, [pc, #52]	; (80010b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001082:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001084:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001088:	480c      	ldr	r0, [pc, #48]	; (80010bc <LoopForever+0x6>)
  ldr r1, =_edata
 800108a:	490d      	ldr	r1, [pc, #52]	; (80010c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800108c:	4a0d      	ldr	r2, [pc, #52]	; (80010c4 <LoopForever+0xe>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001090:	e002      	b.n	8001098 <LoopCopyDataInit>

08001092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001096:	3304      	adds	r3, #4

08001098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800109c:	d3f9      	bcc.n	8001092 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109e:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010a0:	4c0a      	ldr	r4, [pc, #40]	; (80010cc <LoopForever+0x16>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a4:	e001      	b.n	80010aa <LoopFillZerobss>

080010a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a8:	3204      	adds	r2, #4

080010aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ac:	d3fb      	bcc.n	80010a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010ae:	f000 f811 	bl	80010d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010b2:	f7ff ff63 	bl	8000f7c <main>

080010b6 <LoopForever>:

LoopForever:
    b LoopForever
 80010b6:	e7fe      	b.n	80010b6 <LoopForever>
  ldr   r0, =_estack
 80010b8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80010bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80010c4:	08001160 	.word	0x08001160
  ldr r2, =_sbss
 80010c8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80010cc:	2000001c 	.word	0x2000001c

080010d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010d0:	e7fe      	b.n	80010d0 <ADC1_2_IRQHandler>
	...

080010d4 <__libc_init_array>:
 80010d4:	b570      	push	{r4, r5, r6, lr}
 80010d6:	2600      	movs	r6, #0
 80010d8:	4d0c      	ldr	r5, [pc, #48]	; (800110c <__libc_init_array+0x38>)
 80010da:	4c0d      	ldr	r4, [pc, #52]	; (8001110 <__libc_init_array+0x3c>)
 80010dc:	1b64      	subs	r4, r4, r5
 80010de:	10a4      	asrs	r4, r4, #2
 80010e0:	42a6      	cmp	r6, r4
 80010e2:	d109      	bne.n	80010f8 <__libc_init_array+0x24>
 80010e4:	f000 f81a 	bl	800111c <_init>
 80010e8:	2600      	movs	r6, #0
 80010ea:	4d0a      	ldr	r5, [pc, #40]	; (8001114 <__libc_init_array+0x40>)
 80010ec:	4c0a      	ldr	r4, [pc, #40]	; (8001118 <__libc_init_array+0x44>)
 80010ee:	1b64      	subs	r4, r4, r5
 80010f0:	10a4      	asrs	r4, r4, #2
 80010f2:	42a6      	cmp	r6, r4
 80010f4:	d105      	bne.n	8001102 <__libc_init_array+0x2e>
 80010f6:	bd70      	pop	{r4, r5, r6, pc}
 80010f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80010fc:	4798      	blx	r3
 80010fe:	3601      	adds	r6, #1
 8001100:	e7ee      	b.n	80010e0 <__libc_init_array+0xc>
 8001102:	f855 3b04 	ldr.w	r3, [r5], #4
 8001106:	4798      	blx	r3
 8001108:	3601      	adds	r6, #1
 800110a:	e7f2      	b.n	80010f2 <__libc_init_array+0x1e>
 800110c:	08001158 	.word	0x08001158
 8001110:	08001158 	.word	0x08001158
 8001114:	08001158 	.word	0x08001158
 8001118:	0800115c 	.word	0x0800115c

0800111c <_init>:
 800111c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111e:	bf00      	nop
 8001120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001122:	bc08      	pop	{r3}
 8001124:	469e      	mov	lr, r3
 8001126:	4770      	bx	lr

08001128 <_fini>:
 8001128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800112a:	bf00      	nop
 800112c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800112e:	bc08      	pop	{r3}
 8001130:	469e      	mov	lr, r3
 8001132:	4770      	bx	lr
