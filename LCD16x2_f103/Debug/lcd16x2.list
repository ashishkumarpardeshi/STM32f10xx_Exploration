
lcd16x2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000834  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08000964  08000964  00010964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000998  08000998  000109a0  2**0
                  CONTENTS
  4 .ARM          00000000  08000998  08000998  000109a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000998  080009a0  000109a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000998  08000998  00010998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800099c  0800099c  0001099c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000109a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000000  080009a0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080009a0  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000109a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a5f  00000000  00000000  000109c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000356  00000000  00000000  00011428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000118  00000000  00000000  00011780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000e0  00000000  00000000  00011898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000155f  00000000  00000000  00011978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000011a5  00000000  00000000  00012ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000053da  00000000  00000000  0001407c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00019456  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000360  00000000  00000000  000194ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800094c 	.word	0x0800094c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800094c 	.word	0x0800094c

08000170 <GPIO_Init>:
/*
 * Init and Deinit GPIO
 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000170:	b480      	push	{r7}
 8000172:	b087      	sub	sp, #28
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0x0;
 8000178:	2300      	movs	r3, #0
 800017a:	617b      	str	r3, [r7, #20]
	uint32_t crl = 0x0, crh = 0x0;
 800017c:	2300      	movs	r3, #0
 800017e:	613b      	str	r3, [r7, #16]
 8000180:	2300      	movs	r3, #0
 8000182:	60fb      	str	r3, [r7, #12]
	uint16_t offset;
	uint8_t pinNo;

	pinNo = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber;
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	791b      	ldrb	r3, [r3, #4]
 8000188:	727b      	strb	r3, [r7, #9]

	crl = pGPIOHandle -> pGPIOx -> CRL;
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	613b      	str	r3, [r7, #16]
	crh = pGPIOHandle -> pGPIOx -> CRH;
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	685b      	ldr	r3, [r3, #4]
 8000198:	60fb      	str	r3, [r7, #12]

	if(pinNo < 8)
 800019a:	7a7b      	ldrb	r3, [r7, #9]
 800019c:	2b07      	cmp	r3, #7
 800019e:	d806      	bhi.n	80001ae <GPIO_Init+0x3e>
	{
		offset = pinNo * 4;
 80001a0:	7a7b      	ldrb	r3, [r7, #9]
 80001a2:	b29b      	uxth	r3, r3
 80001a4:	009b      	lsls	r3, r3, #2
 80001a6:	817b      	strh	r3, [r7, #10]
		temp = crl;
 80001a8:	693b      	ldr	r3, [r7, #16]
 80001aa:	617b      	str	r3, [r7, #20]
 80001ac:	e006      	b.n	80001bc <GPIO_Init+0x4c>
	}
	else
	{
		offset = (pinNo - 8) * 4;
 80001ae:	7a7b      	ldrb	r3, [r7, #9]
 80001b0:	3b08      	subs	r3, #8
 80001b2:	b29b      	uxth	r3, r3
 80001b4:	009b      	lsls	r3, r3, #2
 80001b6:	817b      	strh	r3, [r7, #10]
		temp = crh;
 80001b8:	68fb      	ldr	r3, [r7, #12]
 80001ba:	617b      	str	r3, [r7, #20]
	}

	temp &= ~(0xf << offset);
 80001bc:	897b      	ldrh	r3, [r7, #10]
 80001be:	220f      	movs	r2, #15
 80001c0:	fa02 f303 	lsl.w	r3, r2, r3
 80001c4:	43db      	mvns	r3, r3
 80001c6:	461a      	mov	r2, r3
 80001c8:	697b      	ldr	r3, [r7, #20]
 80001ca:	4013      	ands	r3, r2
 80001cc:	617b      	str	r3, [r7, #20]
	temp |= (pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << offset)| (pGPIOHandle -> GPIO_PinConfig.GPIO_PinOutInType << (offset + 2));
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	795b      	ldrb	r3, [r3, #5]
 80001d2:	461a      	mov	r2, r3
 80001d4:	897b      	ldrh	r3, [r7, #10]
 80001d6:	409a      	lsls	r2, r3
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	799b      	ldrb	r3, [r3, #6]
 80001dc:	4619      	mov	r1, r3
 80001de:	897b      	ldrh	r3, [r7, #10]
 80001e0:	3302      	adds	r3, #2
 80001e2:	fa01 f303 	lsl.w	r3, r1, r3
 80001e6:	4313      	orrs	r3, r2
 80001e8:	461a      	mov	r2, r3
 80001ea:	697b      	ldr	r3, [r7, #20]
 80001ec:	4313      	orrs	r3, r2
 80001ee:	617b      	str	r3, [r7, #20]

	if(pinNo < 8)
 80001f0:	7a7b      	ldrb	r3, [r7, #9]
 80001f2:	2b07      	cmp	r3, #7
 80001f4:	d802      	bhi.n	80001fc <GPIO_Init+0x8c>
	{
		crl = temp;
 80001f6:	697b      	ldr	r3, [r7, #20]
 80001f8:	613b      	str	r3, [r7, #16]
 80001fa:	e001      	b.n	8000200 <GPIO_Init+0x90>
		//pGPIOHandle -> pGPIOx -> CRL =  temp;
	}
	else
	{
		crh = temp;
 80001fc:	697b      	ldr	r3, [r7, #20]
 80001fe:	60fb      	str	r3, [r7, #12]
		//pGPIOHandle -> pGPIOx -> CRH = temp;

	}

	pGPIOHandle -> pGPIOx -> CRL =  crl;
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	693a      	ldr	r2, [r7, #16]
 8000206:	601a      	str	r2, [r3, #0]
	pGPIOHandle -> pGPIOx -> CRH = crh;
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	68fa      	ldr	r2, [r7, #12]
 800020e:	605a      	str	r2, [r3, #4]

}
 8000210:	bf00      	nop
 8000212:	371c      	adds	r7, #28
 8000214:	46bd      	mov	sp, r7
 8000216:	bc80      	pop	{r7}
 8000218:	4770      	bx	lr
	...

0800021c <GPIO_PeriClkControl>:
/*
 * Peripheral Clock Setup
 */

void GPIO_PeriClkControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	460b      	mov	r3, r1
 8000226:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000228:	78fb      	ldrb	r3, [r7, #3]
 800022a:	2b01      	cmp	r3, #1
 800022c:	d136      	bne.n	800029c <GPIO_PeriClkControl+0x80>
	{
		if(pGPIOx == GPIOA)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4a38      	ldr	r2, [pc, #224]	; (8000314 <GPIO_PeriClkControl+0xf8>)
 8000232:	4293      	cmp	r3, r2
 8000234:	d106      	bne.n	8000244 <GPIO_PeriClkControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000236:	4b38      	ldr	r3, [pc, #224]	; (8000318 <GPIO_PeriClkControl+0xfc>)
 8000238:	699b      	ldr	r3, [r3, #24]
 800023a:	4a37      	ldr	r2, [pc, #220]	; (8000318 <GPIO_PeriClkControl+0xfc>)
 800023c:	f043 0304 	orr.w	r3, r3, #4
 8000240:	6193      	str	r3, [r2, #24]
		{
			GPIOE_PCLK_DI();
		}
	}

}
 8000242:	e061      	b.n	8000308 <GPIO_PeriClkControl+0xec>
		else if(pGPIOx == GPIOB)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	4a35      	ldr	r2, [pc, #212]	; (800031c <GPIO_PeriClkControl+0x100>)
 8000248:	4293      	cmp	r3, r2
 800024a:	d106      	bne.n	800025a <GPIO_PeriClkControl+0x3e>
			GPIOB_PCLK_EN();
 800024c:	4b32      	ldr	r3, [pc, #200]	; (8000318 <GPIO_PeriClkControl+0xfc>)
 800024e:	699b      	ldr	r3, [r3, #24]
 8000250:	4a31      	ldr	r2, [pc, #196]	; (8000318 <GPIO_PeriClkControl+0xfc>)
 8000252:	f043 0308 	orr.w	r3, r3, #8
 8000256:	6193      	str	r3, [r2, #24]
}
 8000258:	e056      	b.n	8000308 <GPIO_PeriClkControl+0xec>
		else if(pGPIOx == GPIOC)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	4a30      	ldr	r2, [pc, #192]	; (8000320 <GPIO_PeriClkControl+0x104>)
 800025e:	4293      	cmp	r3, r2
 8000260:	d106      	bne.n	8000270 <GPIO_PeriClkControl+0x54>
			GPIOC_PCLK_EN();
 8000262:	4b2d      	ldr	r3, [pc, #180]	; (8000318 <GPIO_PeriClkControl+0xfc>)
 8000264:	699b      	ldr	r3, [r3, #24]
 8000266:	4a2c      	ldr	r2, [pc, #176]	; (8000318 <GPIO_PeriClkControl+0xfc>)
 8000268:	f043 0310 	orr.w	r3, r3, #16
 800026c:	6193      	str	r3, [r2, #24]
}
 800026e:	e04b      	b.n	8000308 <GPIO_PeriClkControl+0xec>
		else if(pGPIOx == GPIOD)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	4a2c      	ldr	r2, [pc, #176]	; (8000324 <GPIO_PeriClkControl+0x108>)
 8000274:	4293      	cmp	r3, r2
 8000276:	d106      	bne.n	8000286 <GPIO_PeriClkControl+0x6a>
			GPIOD_PCLK_EN();
 8000278:	4b27      	ldr	r3, [pc, #156]	; (8000318 <GPIO_PeriClkControl+0xfc>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	4a26      	ldr	r2, [pc, #152]	; (8000318 <GPIO_PeriClkControl+0xfc>)
 800027e:	f043 0320 	orr.w	r3, r3, #32
 8000282:	6193      	str	r3, [r2, #24]
}
 8000284:	e040      	b.n	8000308 <GPIO_PeriClkControl+0xec>
		else if(pGPIOx == GPIOE)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	4a27      	ldr	r2, [pc, #156]	; (8000328 <GPIO_PeriClkControl+0x10c>)
 800028a:	4293      	cmp	r3, r2
 800028c:	d13c      	bne.n	8000308 <GPIO_PeriClkControl+0xec>
			GPIOE_PCLK_EN();
 800028e:	4b22      	ldr	r3, [pc, #136]	; (8000318 <GPIO_PeriClkControl+0xfc>)
 8000290:	699b      	ldr	r3, [r3, #24]
 8000292:	4a21      	ldr	r2, [pc, #132]	; (8000318 <GPIO_PeriClkControl+0xfc>)
 8000294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000298:	6193      	str	r3, [r2, #24]
}
 800029a:	e035      	b.n	8000308 <GPIO_PeriClkControl+0xec>
		if(pGPIOx == GPIOA)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	4a1d      	ldr	r2, [pc, #116]	; (8000314 <GPIO_PeriClkControl+0xf8>)
 80002a0:	4293      	cmp	r3, r2
 80002a2:	d106      	bne.n	80002b2 <GPIO_PeriClkControl+0x96>
			GPIOA_PCLK_DI();
 80002a4:	4b1c      	ldr	r3, [pc, #112]	; (8000318 <GPIO_PeriClkControl+0xfc>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	4a1b      	ldr	r2, [pc, #108]	; (8000318 <GPIO_PeriClkControl+0xfc>)
 80002aa:	f023 0304 	bic.w	r3, r3, #4
 80002ae:	6193      	str	r3, [r2, #24]
}
 80002b0:	e02a      	b.n	8000308 <GPIO_PeriClkControl+0xec>
		else if(pGPIOx == GPIOB)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	4a19      	ldr	r2, [pc, #100]	; (800031c <GPIO_PeriClkControl+0x100>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d106      	bne.n	80002c8 <GPIO_PeriClkControl+0xac>
			GPIOB_PCLK_DI();
 80002ba:	4b17      	ldr	r3, [pc, #92]	; (8000318 <GPIO_PeriClkControl+0xfc>)
 80002bc:	699b      	ldr	r3, [r3, #24]
 80002be:	4a16      	ldr	r2, [pc, #88]	; (8000318 <GPIO_PeriClkControl+0xfc>)
 80002c0:	f023 0308 	bic.w	r3, r3, #8
 80002c4:	6193      	str	r3, [r2, #24]
}
 80002c6:	e01f      	b.n	8000308 <GPIO_PeriClkControl+0xec>
		else if(pGPIOx == GPIOC)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	4a15      	ldr	r2, [pc, #84]	; (8000320 <GPIO_PeriClkControl+0x104>)
 80002cc:	4293      	cmp	r3, r2
 80002ce:	d106      	bne.n	80002de <GPIO_PeriClkControl+0xc2>
			GPIOC_PCLK_DI();
 80002d0:	4b11      	ldr	r3, [pc, #68]	; (8000318 <GPIO_PeriClkControl+0xfc>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	4a10      	ldr	r2, [pc, #64]	; (8000318 <GPIO_PeriClkControl+0xfc>)
 80002d6:	f023 0310 	bic.w	r3, r3, #16
 80002da:	6193      	str	r3, [r2, #24]
}
 80002dc:	e014      	b.n	8000308 <GPIO_PeriClkControl+0xec>
		else if(pGPIOx == GPIOD)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	4a10      	ldr	r2, [pc, #64]	; (8000324 <GPIO_PeriClkControl+0x108>)
 80002e2:	4293      	cmp	r3, r2
 80002e4:	d106      	bne.n	80002f4 <GPIO_PeriClkControl+0xd8>
			GPIOD_PCLK_DI();
 80002e6:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <GPIO_PeriClkControl+0xfc>)
 80002e8:	699b      	ldr	r3, [r3, #24]
 80002ea:	4a0b      	ldr	r2, [pc, #44]	; (8000318 <GPIO_PeriClkControl+0xfc>)
 80002ec:	f023 0320 	bic.w	r3, r3, #32
 80002f0:	6193      	str	r3, [r2, #24]
}
 80002f2:	e009      	b.n	8000308 <GPIO_PeriClkControl+0xec>
		else if(pGPIOx == GPIOE)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4a0c      	ldr	r2, [pc, #48]	; (8000328 <GPIO_PeriClkControl+0x10c>)
 80002f8:	4293      	cmp	r3, r2
 80002fa:	d105      	bne.n	8000308 <GPIO_PeriClkControl+0xec>
			GPIOE_PCLK_DI();
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <GPIO_PeriClkControl+0xfc>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a05      	ldr	r2, [pc, #20]	; (8000318 <GPIO_PeriClkControl+0xfc>)
 8000302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000306:	6193      	str	r3, [r2, #24]
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40010800 	.word	0x40010800
 8000318:	40021000 	.word	0x40021000
 800031c:	40010c00 	.word	0x40010c00
 8000320:	40011000 	.word	0x40011000
 8000324:	40011400 	.word	0x40011400
 8000328:	40011800 	.word	0x40011800

0800032c <GPIO_TogglePin>:
{
	pGPIOx -> ODR = value;
}

void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	460b      	mov	r3, r1
 8000336:	70fb      	strb	r3, [r7, #3]
	pGPIOx -> ODR ^= (1 << PinNumber);
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	68db      	ldr	r3, [r3, #12]
 800033c:	78fa      	ldrb	r2, [r7, #3]
 800033e:	2101      	movs	r1, #1
 8000340:	fa01 f202 	lsl.w	r2, r1, r2
 8000344:	405a      	eors	r2, r3
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	60da      	str	r2, [r3, #12]
}
 800034a:	bf00      	nop
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr

08000354 <LCD_Init>:
 *                     APIs Function Definition for LCD Display
 *******************************************************************************************/


void LCD_Init() // Initialize the LCD
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0

/*************** GPIO Clock Enable *********************************************************/

	GPIO_PeriClkControl(LCD_CONTROL_PORT, ENABLE);		// Enable Clock for LCD Control Port
 8000358:	2101      	movs	r1, #1
 800035a:	483f      	ldr	r0, [pc, #252]	; (8000458 <LCD_Init+0x104>)
 800035c:	f7ff ff5e 	bl	800021c <GPIO_PeriClkControl>
	GPIO_PeriClkControl(LCD_DATA_PORT, ENABLE);			// Enable Clock for LCD Data Port
 8000360:	2101      	movs	r1, #1
 8000362:	483d      	ldr	r0, [pc, #244]	; (8000458 <LCD_Init+0x104>)
 8000364:	f7ff ff5a 	bl	800021c <GPIO_PeriClkControl>
/*******************************************************************************************/


/*************** GPIO configuration for LCD ************************************************/

	lcd_Control.pGPIOx = LCD_CONTROL_PORT;
 8000368:	4b3c      	ldr	r3, [pc, #240]	; (800045c <LCD_Init+0x108>)
 800036a:	4a3b      	ldr	r2, [pc, #236]	; (8000458 <LCD_Init+0x104>)
 800036c:	601a      	str	r2, [r3, #0]
	lcd_Control.GPIO_PinConfig.GPIO_PinNumber = LCD_RS_PIN;
 800036e:	4b3b      	ldr	r3, [pc, #236]	; (800045c <LCD_Init+0x108>)
 8000370:	2200      	movs	r2, #0
 8000372:	711a      	strb	r2, [r3, #4]
	lcd_Control.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_2MHZ;
 8000374:	4b39      	ldr	r3, [pc, #228]	; (800045c <LCD_Init+0x108>)
 8000376:	2202      	movs	r2, #2
 8000378:	715a      	strb	r2, [r3, #5]
	lcd_Control.GPIO_PinConfig.GPIO_PinOutInType = GPIO_OP_PP;
 800037a:	4b38      	ldr	r3, [pc, #224]	; (800045c <LCD_Init+0x108>)
 800037c:	2200      	movs	r2, #0
 800037e:	719a      	strb	r2, [r3, #6]

	GPIO_Init(&lcd_Control);
 8000380:	4836      	ldr	r0, [pc, #216]	; (800045c <LCD_Init+0x108>)
 8000382:	f7ff fef5 	bl	8000170 <GPIO_Init>

	lcd_Control.pGPIOx = LCD_CONTROL_PORT;
 8000386:	4b35      	ldr	r3, [pc, #212]	; (800045c <LCD_Init+0x108>)
 8000388:	4a33      	ldr	r2, [pc, #204]	; (8000458 <LCD_Init+0x104>)
 800038a:	601a      	str	r2, [r3, #0]
	lcd_Control.GPIO_PinConfig.GPIO_PinNumber = LCD_EN_PIN;
 800038c:	4b33      	ldr	r3, [pc, #204]	; (800045c <LCD_Init+0x108>)
 800038e:	2201      	movs	r2, #1
 8000390:	711a      	strb	r2, [r3, #4]
	lcd_Control.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_2MHZ;
 8000392:	4b32      	ldr	r3, [pc, #200]	; (800045c <LCD_Init+0x108>)
 8000394:	2202      	movs	r2, #2
 8000396:	715a      	strb	r2, [r3, #5]
	lcd_Control.GPIO_PinConfig.GPIO_PinOutInType = GPIO_OP_PP;
 8000398:	4b30      	ldr	r3, [pc, #192]	; (800045c <LCD_Init+0x108>)
 800039a:	2200      	movs	r2, #0
 800039c:	719a      	strb	r2, [r3, #6]


	GPIO_Init(&lcd_Control);
 800039e:	482f      	ldr	r0, [pc, #188]	; (800045c <LCD_Init+0x108>)
 80003a0:	f7ff fee6 	bl	8000170 <GPIO_Init>

	lcd_Data.pGPIOx = LCD_DATA_PORT;
 80003a4:	4b2e      	ldr	r3, [pc, #184]	; (8000460 <LCD_Init+0x10c>)
 80003a6:	4a2c      	ldr	r2, [pc, #176]	; (8000458 <LCD_Init+0x104>)
 80003a8:	601a      	str	r2, [r3, #0]
	lcd_Data.GPIO_PinConfig.GPIO_PinNumber = LCD_D4_PIN;
 80003aa:	4b2d      	ldr	r3, [pc, #180]	; (8000460 <LCD_Init+0x10c>)
 80003ac:	2202      	movs	r2, #2
 80003ae:	711a      	strb	r2, [r3, #4]
	lcd_Data.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_2MHZ;
 80003b0:	4b2b      	ldr	r3, [pc, #172]	; (8000460 <LCD_Init+0x10c>)
 80003b2:	2202      	movs	r2, #2
 80003b4:	715a      	strb	r2, [r3, #5]
	lcd_Data.GPIO_PinConfig.GPIO_PinOutInType = GPIO_OP_PP;
 80003b6:	4b2a      	ldr	r3, [pc, #168]	; (8000460 <LCD_Init+0x10c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	719a      	strb	r2, [r3, #6]

	GPIO_Init(&lcd_Data);
 80003bc:	4828      	ldr	r0, [pc, #160]	; (8000460 <LCD_Init+0x10c>)
 80003be:	f7ff fed7 	bl	8000170 <GPIO_Init>

	lcd_Data.pGPIOx = LCD_DATA_PORT;
 80003c2:	4b27      	ldr	r3, [pc, #156]	; (8000460 <LCD_Init+0x10c>)
 80003c4:	4a24      	ldr	r2, [pc, #144]	; (8000458 <LCD_Init+0x104>)
 80003c6:	601a      	str	r2, [r3, #0]
	lcd_Data.GPIO_PinConfig.GPIO_PinNumber = LCD_D5_PIN;
 80003c8:	4b25      	ldr	r3, [pc, #148]	; (8000460 <LCD_Init+0x10c>)
 80003ca:	2203      	movs	r2, #3
 80003cc:	711a      	strb	r2, [r3, #4]
	lcd_Data.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_2MHZ;
 80003ce:	4b24      	ldr	r3, [pc, #144]	; (8000460 <LCD_Init+0x10c>)
 80003d0:	2202      	movs	r2, #2
 80003d2:	715a      	strb	r2, [r3, #5]
	lcd_Data.GPIO_PinConfig.GPIO_PinOutInType = GPIO_OP_PP;
 80003d4:	4b22      	ldr	r3, [pc, #136]	; (8000460 <LCD_Init+0x10c>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	719a      	strb	r2, [r3, #6]

	GPIO_Init(&lcd_Data);
 80003da:	4821      	ldr	r0, [pc, #132]	; (8000460 <LCD_Init+0x10c>)
 80003dc:	f7ff fec8 	bl	8000170 <GPIO_Init>

	lcd_Data.pGPIOx = LCD_DATA_PORT;
 80003e0:	4b1f      	ldr	r3, [pc, #124]	; (8000460 <LCD_Init+0x10c>)
 80003e2:	4a1d      	ldr	r2, [pc, #116]	; (8000458 <LCD_Init+0x104>)
 80003e4:	601a      	str	r2, [r3, #0]
	lcd_Data.GPIO_PinConfig.GPIO_PinNumber = LCD_D6_PIN;
 80003e6:	4b1e      	ldr	r3, [pc, #120]	; (8000460 <LCD_Init+0x10c>)
 80003e8:	2204      	movs	r2, #4
 80003ea:	711a      	strb	r2, [r3, #4]
	lcd_Data.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_2MHZ;
 80003ec:	4b1c      	ldr	r3, [pc, #112]	; (8000460 <LCD_Init+0x10c>)
 80003ee:	2202      	movs	r2, #2
 80003f0:	715a      	strb	r2, [r3, #5]
	lcd_Data.GPIO_PinConfig.GPIO_PinOutInType = GPIO_OP_PP;
 80003f2:	4b1b      	ldr	r3, [pc, #108]	; (8000460 <LCD_Init+0x10c>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	719a      	strb	r2, [r3, #6]

	GPIO_Init(&lcd_Data);
 80003f8:	4819      	ldr	r0, [pc, #100]	; (8000460 <LCD_Init+0x10c>)
 80003fa:	f7ff feb9 	bl	8000170 <GPIO_Init>

	lcd_Data.pGPIOx = LCD_DATA_PORT;
 80003fe:	4b18      	ldr	r3, [pc, #96]	; (8000460 <LCD_Init+0x10c>)
 8000400:	4a15      	ldr	r2, [pc, #84]	; (8000458 <LCD_Init+0x104>)
 8000402:	601a      	str	r2, [r3, #0]
	lcd_Data.GPIO_PinConfig.GPIO_PinNumber = LCD_D7_PIN;
 8000404:	4b16      	ldr	r3, [pc, #88]	; (8000460 <LCD_Init+0x10c>)
 8000406:	2205      	movs	r2, #5
 8000408:	711a      	strb	r2, [r3, #4]
	lcd_Data.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_2MHZ;
 800040a:	4b15      	ldr	r3, [pc, #84]	; (8000460 <LCD_Init+0x10c>)
 800040c:	2202      	movs	r2, #2
 800040e:	715a      	strb	r2, [r3, #5]
	lcd_Data.GPIO_PinConfig.GPIO_PinOutInType = GPIO_OP_PP;
 8000410:	4b13      	ldr	r3, [pc, #76]	; (8000460 <LCD_Init+0x10c>)
 8000412:	2200      	movs	r2, #0
 8000414:	719a      	strb	r2, [r3, #6]

	GPIO_Init(&lcd_Data);
 8000416:	4812      	ldr	r0, [pc, #72]	; (8000460 <LCD_Init+0x10c>)
 8000418:	f7ff feaa 	bl	8000170 <GPIO_Init>
	lcd_Data.pGPIOx -> BSRR = 1 << LCD_D5_PIN;
	LCD_En_Pulse();*/

/*************** LCD Initialization Sequence ************************************************/

	delay_ms(20);						// Wait for LCD initialization after LCD power ON
 800041c:	2014      	movs	r0, #20
 800041e:	f000 f9d3 	bl	80007c8 <delay_ms>

	LCD_Write(0x02, CMD);				// 4-Bit Mode
 8000422:	2100      	movs	r1, #0
 8000424:	2002      	movs	r0, #2
 8000426:	f000 f841 	bl	80004ac <LCD_Write>

	LCD_Write(LCD_4BITMODEDL, CMD);		// Configure LCD in 4-Bit Mode
 800042a:	2100      	movs	r1, #0
 800042c:	2028      	movs	r0, #40	; 0x28
 800042e:	f000 f83d 	bl	80004ac <LCD_Write>

	LCD_Write(LCD_DisCurBlink, CMD);	//	Display ON, Cursor ON, Blink ON
 8000432:	2100      	movs	r1, #0
 8000434:	200f      	movs	r0, #15
 8000436:	f000 f839 	bl	80004ac <LCD_Write>

	LCD_Write(LCD_INCCurNoShift, CMD);	//  Increment the Cursor
 800043a:	2100      	movs	r1, #0
 800043c:	2006      	movs	r0, #6
 800043e:	f000 f835 	bl	80004ac <LCD_Write>

	LCD_Write(LCD_CLEAR_DISPLAY, CMD);	// Clear the display
 8000442:	2100      	movs	r1, #0
 8000444:	2001      	movs	r0, #1
 8000446:	f000 f831 	bl	80004ac <LCD_Write>

	LCD_Write(LCD_CurPosition, CMD);	//  Initial Cursor Position 0th position @ Line 1
 800044a:	2100      	movs	r1, #0
 800044c:	2080      	movs	r0, #128	; 0x80
 800044e:	f000 f82d 	bl	80004ac <LCD_Write>


/*********************************************************************************************/

}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	40010800 	.word	0x40010800
 800045c:	20000024 	.word	0x20000024
 8000460:	2000001c 	.word	0x2000001c

08000464 <LCD_Clear>:
  * @retval	None
  ******************************************************************************
  */

void LCD_Clear(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0

	LCD_Write(LCD_CLEAR_DISPLAY, CMD);
 8000468:	2100      	movs	r1, #0
 800046a:	2001      	movs	r0, #1
 800046c:	f000 f81e 	bl	80004ac <LCD_Write>

}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}

08000474 <LCD_SetCursor>:
  * @retval	None
  ******************************************************************************
  */

void LCD_SetCursor(uint8_t row, uint8_t col)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	460a      	mov	r2, r1
 800047e:	71fb      	strb	r3, [r7, #7]
 8000480:	4613      	mov	r3, r2
 8000482:	71bb      	strb	r3, [r7, #6]

		LCD_Write(col + 0x80,CMD);

	#elif LCD_ROWS == 2

		if(row == 0)
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d103      	bne.n	8000492 <LCD_SetCursor+0x1e>
		{
			col = col + 0x80;
 800048a:	79bb      	ldrb	r3, [r7, #6]
 800048c:	3b80      	subs	r3, #128	; 0x80
 800048e:	71bb      	strb	r3, [r7, #6]
 8000490:	e002      	b.n	8000498 <LCD_SetCursor+0x24>
		}
		else
		{
			col = col + 0xC0;
 8000492:	79bb      	ldrb	r3, [r7, #6]
 8000494:	3b40      	subs	r3, #64	; 0x40
 8000496:	71bb      	strb	r3, [r7, #6]
		}

		LCD_Write(col,CMD);
 8000498:	79bb      	ldrb	r3, [r7, #6]
 800049a:	2100      	movs	r1, #0
 800049c:	4618      	mov	r0, r3
 800049e:	f000 f805 	bl	80004ac <LCD_Write>

		LCD_Write(col,CMD);

	#endif

}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
	...

080004ac <LCD_Write>:
  * @retval	None
  ******************************************************************************
  */

void LCD_Write(uint8_t data, uint8_t rs)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	460a      	mov	r2, r1
 80004b6:	71fb      	strb	r3, [r7, #7]
 80004b8:	4613      	mov	r3, r2
 80004ba:	71bb      	strb	r3, [r7, #6]


	lcd_Control.pGPIOx -> BRR = (1 << LCD_D4_PIN) | (1 << LCD_D5_PIN) | (1 << LCD_D6_PIN) | (1 << LCD_D7_PIN); // Clear all Data lines of LCD
 80004bc:	4b31      	ldr	r3, [pc, #196]	; (8000584 <LCD_Write+0xd8>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	223c      	movs	r2, #60	; 0x3c
 80004c2:	615a      	str	r2, [r3, #20]

	// Send Higher Nibble of Data First
	if(data & 0x80)
 80004c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	da03      	bge.n	80004d4 <LCD_Write+0x28>
		lcd_Data.pGPIOx -> BSRR = 1 << LCD_D7_PIN;
 80004cc:	4b2e      	ldr	r3, [pc, #184]	; (8000588 <LCD_Write+0xdc>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2220      	movs	r2, #32
 80004d2:	611a      	str	r2, [r3, #16]
	if(data & 0x40)
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d003      	beq.n	80004e6 <LCD_Write+0x3a>
		lcd_Data.pGPIOx -> BSRR = 1 << LCD_D6_PIN;
 80004de:	4b2a      	ldr	r3, [pc, #168]	; (8000588 <LCD_Write+0xdc>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	2210      	movs	r2, #16
 80004e4:	611a      	str	r2, [r3, #16]
	if(data & 0x20)
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	f003 0320 	and.w	r3, r3, #32
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d003      	beq.n	80004f8 <LCD_Write+0x4c>
		lcd_Data.pGPIOx -> BSRR = 1 << LCD_D5_PIN;
 80004f0:	4b25      	ldr	r3, [pc, #148]	; (8000588 <LCD_Write+0xdc>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2208      	movs	r2, #8
 80004f6:	611a      	str	r2, [r3, #16]
	if(data & 0x10)
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	f003 0310 	and.w	r3, r3, #16
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d003      	beq.n	800050a <LCD_Write+0x5e>
		lcd_Data.pGPIOx -> BSRR = 1 << LCD_D4_PIN;
 8000502:	4b21      	ldr	r3, [pc, #132]	; (8000588 <LCD_Write+0xdc>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2204      	movs	r2, #4
 8000508:	611a      	str	r2, [r3, #16]

    // Write to LCD RS Pin for Data/Command
	if(rs == DATA)
 800050a:	79bb      	ldrb	r3, [r7, #6]
 800050c:	2b01      	cmp	r3, #1
 800050e:	d104      	bne.n	800051a <LCD_Write+0x6e>
	{
		lcd_Control.pGPIOx -> BSRR = 1 << LCD_RS_PIN;
 8000510:	4b1c      	ldr	r3, [pc, #112]	; (8000584 <LCD_Write+0xd8>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2201      	movs	r2, #1
 8000516:	611a      	str	r2, [r3, #16]
 8000518:	e003      	b.n	8000522 <LCD_Write+0x76>
	}
	else
	{
		lcd_Control.pGPIOx -> BRR = 1 << LCD_RS_PIN;
 800051a:	4b1a      	ldr	r3, [pc, #104]	; (8000584 <LCD_Write+0xd8>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2201      	movs	r2, #1
 8000520:	615a      	str	r2, [r3, #20]
	}


	LCD_En_Pulse();
 8000522:	f000 f833 	bl	800058c <LCD_En_Pulse>

	lcd_Control.pGPIOx -> BRR = (1 << LCD_D4_PIN) | (1 << LCD_D5_PIN) | (1 << LCD_D6_PIN) | (1 << LCD_D7_PIN); // Clear all Data lines of LCD
 8000526:	4b17      	ldr	r3, [pc, #92]	; (8000584 <LCD_Write+0xd8>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	223c      	movs	r2, #60	; 0x3c
 800052c:	615a      	str	r2, [r3, #20]

	// Send Lower Nibble of Data First
	if(data & 0x08)
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	f003 0308 	and.w	r3, r3, #8
 8000534:	2b00      	cmp	r3, #0
 8000536:	d003      	beq.n	8000540 <LCD_Write+0x94>
		lcd_Data.pGPIOx -> BSRR = 1 << LCD_D7_PIN;
 8000538:	4b13      	ldr	r3, [pc, #76]	; (8000588 <LCD_Write+0xdc>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2220      	movs	r2, #32
 800053e:	611a      	str	r2, [r3, #16]
	if(data & 0x04)
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	f003 0304 	and.w	r3, r3, #4
 8000546:	2b00      	cmp	r3, #0
 8000548:	d003      	beq.n	8000552 <LCD_Write+0xa6>
		lcd_Data.pGPIOx -> BSRR = 1 << LCD_D6_PIN;
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <LCD_Write+0xdc>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2210      	movs	r2, #16
 8000550:	611a      	str	r2, [r3, #16]
	if(data & 0x02)
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	f003 0302 	and.w	r3, r3, #2
 8000558:	2b00      	cmp	r3, #0
 800055a:	d003      	beq.n	8000564 <LCD_Write+0xb8>
		lcd_Data.pGPIOx -> BSRR = 1 << LCD_D5_PIN;
 800055c:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <LCD_Write+0xdc>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2208      	movs	r2, #8
 8000562:	611a      	str	r2, [r3, #16]
	if(data & 0x01)
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	2b00      	cmp	r3, #0
 800056c:	d003      	beq.n	8000576 <LCD_Write+0xca>
		lcd_Data.pGPIOx -> BSRR = 1 << LCD_D4_PIN;
 800056e:	4b06      	ldr	r3, [pc, #24]	; (8000588 <LCD_Write+0xdc>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2204      	movs	r2, #4
 8000574:	611a      	str	r2, [r3, #16]

	LCD_En_Pulse();
 8000576:	f000 f809 	bl	800058c <LCD_En_Pulse>
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000024 	.word	0x20000024
 8000588:	2000001c 	.word	0x2000001c

0800058c <LCD_En_Pulse>:

void LCD_En_Pulse()
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	lcd_Control.pGPIOx -> BSRR = 1 << LCD_EN_PIN;
 8000590:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <LCD_En_Pulse+0x24>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2202      	movs	r2, #2
 8000596:	611a      	str	r2, [r3, #16]
	delay_ms(1);
 8000598:	2001      	movs	r0, #1
 800059a:	f000 f915 	bl	80007c8 <delay_ms>
	lcd_Control.pGPIOx -> BRR = 1 << LCD_EN_PIN;
 800059e:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <LCD_En_Pulse+0x24>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2202      	movs	r2, #2
 80005a4:	615a      	str	r2, [r3, #20]
	delay_ms(2);
 80005a6:	2002      	movs	r0, #2
 80005a8:	f000 f90e 	bl	80007c8 <delay_ms>

}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000024 	.word	0x20000024

080005b4 <LCD_WriteChar>:

void LCD_WriteChar(uint8_t character)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
	LCD_Write(character, DATA);
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	2101      	movs	r1, #1
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff ff72 	bl	80004ac <LCD_Write>
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <LCD_WriteString>:

void LCD_WriteString(const char* string)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	while(*string)
 80005d8:	e009      	b.n	80005ee <LCD_WriteString+0x1e>
	{
		LCD_WriteChar(*string++);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	1c5a      	adds	r2, r3, #1
 80005de:	607a      	str	r2, [r7, #4]
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff ffe6 	bl	80005b4 <LCD_WriteChar>
		delay_ms(1);
 80005e8:	2001      	movs	r0, #1
 80005ea:	f000 f8ed 	bl	80007c8 <delay_ms>
	while(*string)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d1f1      	bne.n	80005da <LCD_WriteString+0xa>
	}
}
 80005f6:	bf00      	nop
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <LCD_WriteInteger>:

void LCD_WriteInteger(uint16_t intvalue)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	80fb      	strh	r3, [r7, #6]
	uint8_t i = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	73fb      	strb	r3, [r7, #15]

	if(intvalue > 999 && intvalue <= 9999)
 800060e:	88fb      	ldrh	r3, [r7, #6]
 8000610:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000614:	d35a      	bcc.n	80006cc <LCD_WriteInteger+0xcc>
 8000616:	88fb      	ldrh	r3, [r7, #6]
 8000618:	f242 720f 	movw	r2, #9999	; 0x270f
 800061c:	4293      	cmp	r3, r2
 800061e:	d855      	bhi.n	80006cc <LCD_WriteInteger+0xcc>
	{
		i = intvalue / 1000;		// divide 4-digit value by 1000 gives thousand's place integer
 8000620:	88fb      	ldrh	r3, [r7, #6]
 8000622:	4a66      	ldr	r2, [pc, #408]	; (80007bc <LCD_WriteInteger+0x1bc>)
 8000624:	fba2 2303 	umull	r2, r3, r2, r3
 8000628:	099b      	lsrs	r3, r3, #6
 800062a:	b29b      	uxth	r3, r3
 800062c:	73fb      	strb	r3, [r7, #15]
		LCD_WriteChar(i + 48);
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	3330      	adds	r3, #48	; 0x30
 8000632:	b2db      	uxtb	r3, r3
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ffbd 	bl	80005b4 <LCD_WriteChar>

		i = (intvalue / 100) % 10;	// Hundred's place Integer
 800063a:	88fb      	ldrh	r3, [r7, #6]
 800063c:	4a60      	ldr	r2, [pc, #384]	; (80007c0 <LCD_WriteInteger+0x1c0>)
 800063e:	fba2 2303 	umull	r2, r3, r2, r3
 8000642:	095b      	lsrs	r3, r3, #5
 8000644:	b29a      	uxth	r2, r3
 8000646:	4b5f      	ldr	r3, [pc, #380]	; (80007c4 <LCD_WriteInteger+0x1c4>)
 8000648:	fba3 1302 	umull	r1, r3, r3, r2
 800064c:	08d9      	lsrs	r1, r3, #3
 800064e:	460b      	mov	r3, r1
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	440b      	add	r3, r1
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	1ad3      	subs	r3, r2, r3
 8000658:	b29b      	uxth	r3, r3
 800065a:	73fb      	strb	r3, [r7, #15]
		LCD_WriteChar(i + 48);
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	3330      	adds	r3, #48	; 0x30
 8000660:	b2db      	uxtb	r3, r3
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff ffa6 	bl	80005b4 <LCD_WriteChar>

		i = (intvalue % 100) / 10;	// Ten's place Integer
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	4a55      	ldr	r2, [pc, #340]	; (80007c0 <LCD_WriteInteger+0x1c0>)
 800066c:	fba2 1203 	umull	r1, r2, r2, r3
 8000670:	0952      	lsrs	r2, r2, #5
 8000672:	2164      	movs	r1, #100	; 0x64
 8000674:	fb01 f202 	mul.w	r2, r1, r2
 8000678:	1a9b      	subs	r3, r3, r2
 800067a:	b29b      	uxth	r3, r3
 800067c:	4a51      	ldr	r2, [pc, #324]	; (80007c4 <LCD_WriteInteger+0x1c4>)
 800067e:	fba2 2303 	umull	r2, r3, r2, r3
 8000682:	08db      	lsrs	r3, r3, #3
 8000684:	b29b      	uxth	r3, r3
 8000686:	73fb      	strb	r3, [r7, #15]
		LCD_WriteChar(i + 48);
 8000688:	7bfb      	ldrb	r3, [r7, #15]
 800068a:	3330      	adds	r3, #48	; 0x30
 800068c:	b2db      	uxtb	r3, r3
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff ff90 	bl	80005b4 <LCD_WriteChar>

		i = (intvalue % 100) % 10;	// One's place Integer
 8000694:	88fb      	ldrh	r3, [r7, #6]
 8000696:	4a4a      	ldr	r2, [pc, #296]	; (80007c0 <LCD_WriteInteger+0x1c0>)
 8000698:	fba2 1203 	umull	r1, r2, r2, r3
 800069c:	0952      	lsrs	r2, r2, #5
 800069e:	2164      	movs	r1, #100	; 0x64
 80006a0:	fb01 f202 	mul.w	r2, r1, r2
 80006a4:	1a9b      	subs	r3, r3, r2
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	4b46      	ldr	r3, [pc, #280]	; (80007c4 <LCD_WriteInteger+0x1c4>)
 80006aa:	fba3 1302 	umull	r1, r3, r3, r2
 80006ae:	08d9      	lsrs	r1, r3, #3
 80006b0:	460b      	mov	r3, r1
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	440b      	add	r3, r1
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	73fb      	strb	r3, [r7, #15]
		LCD_WriteChar(i + 48);
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	3330      	adds	r3, #48	; 0x30
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff ff75 	bl	80005b4 <LCD_WriteChar>
 80006ca:	e073      	b.n	80007b4 <LCD_WriteInteger+0x1b4>
	}
	else if(intvalue > 99 && intvalue <= 999)
 80006cc:	88fb      	ldrh	r3, [r7, #6]
 80006ce:	2b63      	cmp	r3, #99	; 0x63
 80006d0:	d942      	bls.n	8000758 <LCD_WriteInteger+0x158>
 80006d2:	88fb      	ldrh	r3, [r7, #6]
 80006d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006d8:	d23e      	bcs.n	8000758 <LCD_WriteInteger+0x158>
	{

		i = intvalue / 100;	// Hundred's place Integer
 80006da:	88fb      	ldrh	r3, [r7, #6]
 80006dc:	4a38      	ldr	r2, [pc, #224]	; (80007c0 <LCD_WriteInteger+0x1c0>)
 80006de:	fba2 2303 	umull	r2, r3, r2, r3
 80006e2:	095b      	lsrs	r3, r3, #5
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	73fb      	strb	r3, [r7, #15]
		LCD_WriteChar(i + 48);
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	3330      	adds	r3, #48	; 0x30
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ff60 	bl	80005b4 <LCD_WriteChar>

		i = (intvalue % 100) / 10;	// Ten's place Integer
 80006f4:	88fb      	ldrh	r3, [r7, #6]
 80006f6:	4a32      	ldr	r2, [pc, #200]	; (80007c0 <LCD_WriteInteger+0x1c0>)
 80006f8:	fba2 1203 	umull	r1, r2, r2, r3
 80006fc:	0952      	lsrs	r2, r2, #5
 80006fe:	2164      	movs	r1, #100	; 0x64
 8000700:	fb01 f202 	mul.w	r2, r1, r2
 8000704:	1a9b      	subs	r3, r3, r2
 8000706:	b29b      	uxth	r3, r3
 8000708:	4a2e      	ldr	r2, [pc, #184]	; (80007c4 <LCD_WriteInteger+0x1c4>)
 800070a:	fba2 2303 	umull	r2, r3, r2, r3
 800070e:	08db      	lsrs	r3, r3, #3
 8000710:	b29b      	uxth	r3, r3
 8000712:	73fb      	strb	r3, [r7, #15]
		LCD_WriteChar(i + 48);
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	3330      	adds	r3, #48	; 0x30
 8000718:	b2db      	uxtb	r3, r3
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ff4a 	bl	80005b4 <LCD_WriteChar>

		i = (intvalue % 100) % 10;	// One's place Integer
 8000720:	88fb      	ldrh	r3, [r7, #6]
 8000722:	4a27      	ldr	r2, [pc, #156]	; (80007c0 <LCD_WriteInteger+0x1c0>)
 8000724:	fba2 1203 	umull	r1, r2, r2, r3
 8000728:	0952      	lsrs	r2, r2, #5
 800072a:	2164      	movs	r1, #100	; 0x64
 800072c:	fb01 f202 	mul.w	r2, r1, r2
 8000730:	1a9b      	subs	r3, r3, r2
 8000732:	b29a      	uxth	r2, r3
 8000734:	4b23      	ldr	r3, [pc, #140]	; (80007c4 <LCD_WriteInteger+0x1c4>)
 8000736:	fba3 1302 	umull	r1, r3, r3, r2
 800073a:	08d9      	lsrs	r1, r3, #3
 800073c:	460b      	mov	r3, r1
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	440b      	add	r3, r1
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	b29b      	uxth	r3, r3
 8000748:	73fb      	strb	r3, [r7, #15]
		LCD_WriteChar(i + 48);
 800074a:	7bfb      	ldrb	r3, [r7, #15]
 800074c:	3330      	adds	r3, #48	; 0x30
 800074e:	b2db      	uxtb	r3, r3
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ff2f 	bl	80005b4 <LCD_WriteChar>
 8000756:	e02d      	b.n	80007b4 <LCD_WriteInteger+0x1b4>
	}
	else if(intvalue > 9 && intvalue <= 99)
 8000758:	88fb      	ldrh	r3, [r7, #6]
 800075a:	2b09      	cmp	r3, #9
 800075c:	d922      	bls.n	80007a4 <LCD_WriteInteger+0x1a4>
 800075e:	88fb      	ldrh	r3, [r7, #6]
 8000760:	2b63      	cmp	r3, #99	; 0x63
 8000762:	d81f      	bhi.n	80007a4 <LCD_WriteInteger+0x1a4>
	{

		i = intvalue / 10;			// Ten's place Integer
 8000764:	88fb      	ldrh	r3, [r7, #6]
 8000766:	4a17      	ldr	r2, [pc, #92]	; (80007c4 <LCD_WriteInteger+0x1c4>)
 8000768:	fba2 2303 	umull	r2, r3, r2, r3
 800076c:	08db      	lsrs	r3, r3, #3
 800076e:	b29b      	uxth	r3, r3
 8000770:	73fb      	strb	r3, [r7, #15]
		LCD_WriteChar(i + 48);
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	3330      	adds	r3, #48	; 0x30
 8000776:	b2db      	uxtb	r3, r3
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff ff1b 	bl	80005b4 <LCD_WriteChar>

		i = intvalue % 10;			// One's place Integer
 800077e:	88fa      	ldrh	r2, [r7, #6]
 8000780:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <LCD_WriteInteger+0x1c4>)
 8000782:	fba3 1302 	umull	r1, r3, r3, r2
 8000786:	08d9      	lsrs	r1, r3, #3
 8000788:	460b      	mov	r3, r1
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	440b      	add	r3, r1
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	b29b      	uxth	r3, r3
 8000794:	73fb      	strb	r3, [r7, #15]
		LCD_WriteChar(i + 48);
 8000796:	7bfb      	ldrb	r3, [r7, #15]
 8000798:	3330      	adds	r3, #48	; 0x30
 800079a:	b2db      	uxtb	r3, r3
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ff09 	bl	80005b4 <LCD_WriteChar>
 80007a2:	e007      	b.n	80007b4 <LCD_WriteInteger+0x1b4>
	}
	else
	{
		LCD_WriteChar(intvalue + 48);
 80007a4:	88fb      	ldrh	r3, [r7, #6]
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	3330      	adds	r3, #48	; 0x30
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff01 	bl	80005b4 <LCD_WriteChar>
	}

}
 80007b2:	bf00      	nop
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	10624dd3 	.word	0x10624dd3
 80007c0:	51eb851f 	.word	0x51eb851f
 80007c4:	cccccccd 	.word	0xcccccccd

080007c8 <delay_ms>:

void delay_ms(uint32_t ms)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	uint32_t delay = ms * 668;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f44f 7227 	mov.w	r2, #668	; 0x29c
 80007d6:	fb02 f303 	mul.w	r3, r2, r3
 80007da:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < delay; i++)  // 325000 = 500 msec rough estimation
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	e003      	b.n	80007ea <delay_ms+0x22>
		__asm__("nop");
 80007e2:	bf00      	nop
	for (int i = 0; i < delay; i++)  // 325000 = 500 msec rough estimation
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	3301      	adds	r3, #1
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	68ba      	ldr	r2, [r7, #8]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d8f7      	bhi.n	80007e2 <delay_ms+0x1a>
}
 80007f2:	bf00      	nop
 80007f4:	bf00      	nop
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr
	...

08000800 <main>:
#include "STM32f103xx_lcd_driver.h"			// including LCD Driver

#include <stdint.h>

int main(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0

	uint16_t i = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	81fb      	strh	r3, [r7, #14]

	GPIO_PeriClkControl(GPIOC, ENABLE);
 800080a:	2101      	movs	r1, #1
 800080c:	4824      	ldr	r0, [pc, #144]	; (80008a0 <main+0xa0>)
 800080e:	f7ff fd05 	bl	800021c <GPIO_PeriClkControl>

	GPIO_Handle_t redled;

	redled.pGPIOx = GPIOC; //GPIOB
 8000812:	4b23      	ldr	r3, [pc, #140]	; (80008a0 <main+0xa0>)
 8000814:	607b      	str	r3, [r7, #4]
	redled.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13; //GPIO_PIN_NO_15;
 8000816:	230d      	movs	r3, #13
 8000818:	723b      	strb	r3, [r7, #8]
	redled.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_2MHZ;
 800081a:	2302      	movs	r3, #2
 800081c:	727b      	strb	r3, [r7, #9]
	redled.GPIO_PinConfig.GPIO_PinOutInType = GPIO_OP_PP;
 800081e:	2300      	movs	r3, #0
 8000820:	72bb      	strb	r3, [r7, #10]

	GPIO_Init(&redled);
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff fca3 	bl	8000170 <GPIO_Init>


	LCD_Init();
 800082a:	f7ff fd93 	bl	8000354 <LCD_Init>

	//LCD_Clear();

	LCD_SetCursor(0,0);
 800082e:	2100      	movs	r1, #0
 8000830:	2000      	movs	r0, #0
 8000832:	f7ff fe1f 	bl	8000474 <LCD_SetCursor>

	LCD_WriteString("**** Ashish ****");
 8000836:	481b      	ldr	r0, [pc, #108]	; (80008a4 <main+0xa4>)
 8000838:	f7ff feca 	bl	80005d0 <LCD_WriteString>

	LCD_SetCursor(1,0);		// Set Cursor to line 1, position 0 (or row 1 and col 0)
 800083c:	2100      	movs	r1, #0
 800083e:	2001      	movs	r0, #1
 8000840:	f7ff fe18 	bl	8000474 <LCD_SetCursor>

	LCD_WriteString("**  Workbench **");
 8000844:	4818      	ldr	r0, [pc, #96]	; (80008a8 <main+0xa8>)
 8000846:	f7ff fec3 	bl	80005d0 <LCD_WriteString>


	delay_ms(2000);
 800084a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800084e:	f7ff ffbb 	bl	80007c8 <delay_ms>

	LCD_Clear();
 8000852:	f7ff fe07 	bl	8000464 <LCD_Clear>
	LCD_SetCursor(0,0);
 8000856:	2100      	movs	r1, #0
 8000858:	2000      	movs	r0, #0
 800085a:	f7ff fe0b 	bl	8000474 <LCD_SetCursor>
	LCD_WriteString("Counting..");
 800085e:	4813      	ldr	r0, [pc, #76]	; (80008ac <main+0xac>)
 8000860:	f7ff feb6 	bl	80005d0 <LCD_WriteString>


    /* Loop forever */
	while(1)
	{
		for(i=0; i<10000; i++)
 8000864:	2300      	movs	r3, #0
 8000866:	81fb      	strh	r3, [r7, #14]
 8000868:	e012      	b.n	8000890 <main+0x90>
		{
			LCD_SetCursor(1,0);
 800086a:	2100      	movs	r1, #0
 800086c:	2001      	movs	r0, #1
 800086e:	f7ff fe01 	bl	8000474 <LCD_SetCursor>
			GPIO_TogglePin(GPIOC, GPIO_PIN_NO_13);
 8000872:	210d      	movs	r1, #13
 8000874:	480a      	ldr	r0, [pc, #40]	; (80008a0 <main+0xa0>)
 8000876:	f7ff fd59 	bl	800032c <GPIO_TogglePin>
			LCD_WriteInteger(i);
 800087a:	89fb      	ldrh	r3, [r7, #14]
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff febf 	bl	8000600 <LCD_WriteInteger>
			delay_ms(300);
 8000882:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000886:	f7ff ff9f 	bl	80007c8 <delay_ms>
		for(i=0; i<10000; i++)
 800088a:	89fb      	ldrh	r3, [r7, #14]
 800088c:	3301      	adds	r3, #1
 800088e:	81fb      	strh	r3, [r7, #14]
 8000890:	89fb      	ldrh	r3, [r7, #14]
 8000892:	f242 720f 	movw	r2, #9999	; 0x270f
 8000896:	4293      	cmp	r3, r2
 8000898:	d9e7      	bls.n	800086a <main+0x6a>
		}
		LCD_Clear();	// clear the LCD
 800089a:	f7ff fde3 	bl	8000464 <LCD_Clear>
		for(i=0; i<10000; i++)
 800089e:	e7e1      	b.n	8000864 <main+0x64>
 80008a0:	40011000 	.word	0x40011000
 80008a4:	08000964 	.word	0x08000964
 80008a8:	08000978 	.word	0x08000978
 80008ac:	0800098c 	.word	0x0800098c

080008b0 <Reset_Handler>:
 80008b0:	480d      	ldr	r0, [pc, #52]	; (80008e8 <LoopForever+0x2>)
 80008b2:	4685      	mov	sp, r0
 80008b4:	f3af 8000 	nop.w
 80008b8:	480c      	ldr	r0, [pc, #48]	; (80008ec <LoopForever+0x6>)
 80008ba:	490d      	ldr	r1, [pc, #52]	; (80008f0 <LoopForever+0xa>)
 80008bc:	4a0d      	ldr	r2, [pc, #52]	; (80008f4 <LoopForever+0xe>)
 80008be:	2300      	movs	r3, #0
 80008c0:	e002      	b.n	80008c8 <LoopCopyDataInit>

080008c2 <CopyDataInit>:
 80008c2:	58d4      	ldr	r4, [r2, r3]
 80008c4:	50c4      	str	r4, [r0, r3]
 80008c6:	3304      	adds	r3, #4

080008c8 <LoopCopyDataInit>:
 80008c8:	18c4      	adds	r4, r0, r3
 80008ca:	428c      	cmp	r4, r1
 80008cc:	d3f9      	bcc.n	80008c2 <CopyDataInit>
 80008ce:	4a0a      	ldr	r2, [pc, #40]	; (80008f8 <LoopForever+0x12>)
 80008d0:	4c0a      	ldr	r4, [pc, #40]	; (80008fc <LoopForever+0x16>)
 80008d2:	2300      	movs	r3, #0
 80008d4:	e001      	b.n	80008da <LoopFillZerobss>

080008d6 <FillZerobss>:
 80008d6:	6013      	str	r3, [r2, #0]
 80008d8:	3204      	adds	r2, #4

080008da <LoopFillZerobss>:
 80008da:	42a2      	cmp	r2, r4
 80008dc:	d3fb      	bcc.n	80008d6 <FillZerobss>
 80008de:	f000 f811 	bl	8000904 <__libc_init_array>
 80008e2:	f7ff ff8d 	bl	8000800 <main>

080008e6 <LoopForever>:
 80008e6:	e7fe      	b.n	80008e6 <LoopForever>
 80008e8:	20005000 	.word	0x20005000
 80008ec:	20000000 	.word	0x20000000
 80008f0:	20000000 	.word	0x20000000
 80008f4:	080009a0 	.word	0x080009a0
 80008f8:	20000000 	.word	0x20000000
 80008fc:	2000002c 	.word	0x2000002c

08000900 <ADC1_2_IRQHandler>:
 8000900:	e7fe      	b.n	8000900 <ADC1_2_IRQHandler>
	...

08000904 <__libc_init_array>:
 8000904:	b570      	push	{r4, r5, r6, lr}
 8000906:	2600      	movs	r6, #0
 8000908:	4d0c      	ldr	r5, [pc, #48]	; (800093c <__libc_init_array+0x38>)
 800090a:	4c0d      	ldr	r4, [pc, #52]	; (8000940 <__libc_init_array+0x3c>)
 800090c:	1b64      	subs	r4, r4, r5
 800090e:	10a4      	asrs	r4, r4, #2
 8000910:	42a6      	cmp	r6, r4
 8000912:	d109      	bne.n	8000928 <__libc_init_array+0x24>
 8000914:	f000 f81a 	bl	800094c <_init>
 8000918:	2600      	movs	r6, #0
 800091a:	4d0a      	ldr	r5, [pc, #40]	; (8000944 <__libc_init_array+0x40>)
 800091c:	4c0a      	ldr	r4, [pc, #40]	; (8000948 <__libc_init_array+0x44>)
 800091e:	1b64      	subs	r4, r4, r5
 8000920:	10a4      	asrs	r4, r4, #2
 8000922:	42a6      	cmp	r6, r4
 8000924:	d105      	bne.n	8000932 <__libc_init_array+0x2e>
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f855 3b04 	ldr.w	r3, [r5], #4
 800092c:	4798      	blx	r3
 800092e:	3601      	adds	r6, #1
 8000930:	e7ee      	b.n	8000910 <__libc_init_array+0xc>
 8000932:	f855 3b04 	ldr.w	r3, [r5], #4
 8000936:	4798      	blx	r3
 8000938:	3601      	adds	r6, #1
 800093a:	e7f2      	b.n	8000922 <__libc_init_array+0x1e>
 800093c:	08000998 	.word	0x08000998
 8000940:	08000998 	.word	0x08000998
 8000944:	08000998 	.word	0x08000998
 8000948:	0800099c 	.word	0x0800099c

0800094c <_init>:
 800094c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800094e:	bf00      	nop
 8000950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000952:	bc08      	pop	{r3}
 8000954:	469e      	mov	lr, r3
 8000956:	4770      	bx	lr

08000958 <_fini>:
 8000958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800095a:	bf00      	nop
 800095c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800095e:	bc08      	pop	{r3}
 8000960:	469e      	mov	lr, r3
 8000962:	4770      	bx	lr
