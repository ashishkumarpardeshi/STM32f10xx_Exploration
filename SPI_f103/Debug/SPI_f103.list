
SPI_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006f8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000828  08000828  00010828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000830  08000830  00010838  2**0
                  CONTENTS
  4 .ARM          00000000  08000830  08000830  00010838  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000830  08000838  00010838  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000830  08000830  00010830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000834  08000834  00010834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010838  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000838  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000838  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010838  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001626  00000000  00000000  00010861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000046a  00000000  00000000  00011e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000138  00000000  00000000  000122f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000100  00000000  00000000  00012430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000020c8  00000000  00000000  00012530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000134d  00000000  00000000  000145f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008af8  00000000  00000000  00015945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0001e43d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000424  00000000  00000000  0001e490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000810 	.word	0x08000810

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000810 	.word	0x08000810

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <SPI_PeriClkControl>:
  *
  * @Note	:
  ******************************************************************************
  */
void SPI_PeriClkControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
 8000188:	460b      	mov	r3, r1
 800018a:	70fb      	strb	r3, [r7, #3]
	// For Enabling SPIx Peripheral Clock
	if(EnorDi == ENABLE)
 800018c:	78fb      	ldrb	r3, [r7, #3]
 800018e:	2b01      	cmp	r3, #1
 8000190:	d113      	bne.n	80001ba <SPI_PeriClkControl+0x3a>
	{
		if(pSPIx == SPI1)
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	4a17      	ldr	r2, [pc, #92]	; (80001f4 <SPI_PeriClkControl+0x74>)
 8000196:	4293      	cmp	r3, r2
 8000198:	d105      	bne.n	80001a6 <SPI_PeriClkControl+0x26>
		{
			SPI1_PCLK_EN();
 800019a:	4b17      	ldr	r3, [pc, #92]	; (80001f8 <SPI_PeriClkControl+0x78>)
 800019c:	699b      	ldr	r3, [r3, #24]
 800019e:	4a16      	ldr	r2, [pc, #88]	; (80001f8 <SPI_PeriClkControl+0x78>)
 80001a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80001a4:	6193      	str	r3, [r2, #24]
		}

		if(pSPIx == SPI2)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	4a14      	ldr	r2, [pc, #80]	; (80001fc <SPI_PeriClkControl+0x7c>)
 80001aa:	4293      	cmp	r3, r2
 80001ac:	d105      	bne.n	80001ba <SPI_PeriClkControl+0x3a>
		{
			SPI2_PCLK_EN();
 80001ae:	4b12      	ldr	r3, [pc, #72]	; (80001f8 <SPI_PeriClkControl+0x78>)
 80001b0:	69db      	ldr	r3, [r3, #28]
 80001b2:	4a11      	ldr	r2, [pc, #68]	; (80001f8 <SPI_PeriClkControl+0x78>)
 80001b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80001b8:	61d3      	str	r3, [r2, #28]
		}
	}


	// For Disabling SPIx Peripheral Clock
	if(EnorDi == DISABLE)
 80001ba:	78fb      	ldrb	r3, [r7, #3]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d113      	bne.n	80001e8 <SPI_PeriClkControl+0x68>
	{
		if(pSPIx == SPI1)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	4a0c      	ldr	r2, [pc, #48]	; (80001f4 <SPI_PeriClkControl+0x74>)
 80001c4:	4293      	cmp	r3, r2
 80001c6:	d105      	bne.n	80001d4 <SPI_PeriClkControl+0x54>
		{
			SPI1_PCLK_DI();
 80001c8:	4b0b      	ldr	r3, [pc, #44]	; (80001f8 <SPI_PeriClkControl+0x78>)
 80001ca:	699b      	ldr	r3, [r3, #24]
 80001cc:	4a0a      	ldr	r2, [pc, #40]	; (80001f8 <SPI_PeriClkControl+0x78>)
 80001ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80001d2:	6193      	str	r3, [r2, #24]
		}

		if(pSPIx == SPI2)
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	4a09      	ldr	r2, [pc, #36]	; (80001fc <SPI_PeriClkControl+0x7c>)
 80001d8:	4293      	cmp	r3, r2
 80001da:	d105      	bne.n	80001e8 <SPI_PeriClkControl+0x68>
		{
			SPI2_PCLK_DI();
 80001dc:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <SPI_PeriClkControl+0x78>)
 80001de:	69db      	ldr	r3, [r3, #28]
 80001e0:	4a05      	ldr	r2, [pc, #20]	; (80001f8 <SPI_PeriClkControl+0x78>)
 80001e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80001e6:	61d3      	str	r3, [r2, #28]
		}
	}
}
 80001e8:	bf00      	nop
 80001ea:	370c      	adds	r7, #12
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	40013000 	.word	0x40013000
 80001f8:	40021000 	.word	0x40021000
 80001fc:	40003800 	.word	0x40003800

08000200 <SPI_PeriControl>:
  *
  * @Note	:
  ******************************************************************************
  */
void SPI_PeriControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
 8000208:	460b      	mov	r3, r1
 800020a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800020c:	78fb      	ldrb	r3, [r7, #3]
 800020e:	2b01      	cmp	r3, #1
 8000210:	d106      	bne.n	8000220 <SPI_PeriControl+0x20>
	{
		pSPIx->CR1 |= 1<<SPI_CR1_SPE;
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
	}
}
 800021e:	e005      	b.n	800022c <SPI_PeriControl+0x2c>
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	601a      	str	r2, [r3, #0]
}
 800022c:	bf00      	nop
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr

08000236 <SPI_SSOEConfig>:
  * @Note	:
  ******************************************************************************
  */

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000236:	b480      	push	{r7}
 8000238:	b083      	sub	sp, #12
 800023a:	af00      	add	r7, sp, #0
 800023c:	6078      	str	r0, [r7, #4]
 800023e:	460b      	mov	r3, r1
 8000240:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000242:	78fb      	ldrb	r3, [r7, #3]
 8000244:	2b01      	cmp	r3, #1
 8000246:	d106      	bne.n	8000256 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= 1 << SPI_CR2_SSOE;		// Enable the Slave Select output Enable
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	685b      	ldr	r3, [r3, #4]
 800024c:	f043 0204 	orr.w	r2, r3, #4
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	605a      	str	r2, [r3, #4]
	else
	{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);		// Disable the Slave Select output Enable
	}

}
 8000254:	e005      	b.n	8000262 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);		// Disable the Slave Select output Enable
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	685b      	ldr	r3, [r3, #4]
 800025a:	f023 0204 	bic.w	r2, r3, #4
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	605a      	str	r2, [r3, #4]
}
 8000262:	bf00      	nop
 8000264:	370c      	adds	r7, #12
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr

0800026c <SPI_Init>:
  *
  * @Note	:
  ******************************************************************************
  */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]

	SPI_PeriClkControl(pSPIHandle->pSPIx, ENABLE);		// Enable the SPI2 Clock Peripheral
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	2101      	movs	r1, #1
 800027a:	4618      	mov	r0, r3
 800027c:	f7ff ff80 	bl	8000180 <SPI_PeriClkControl>

	// Configuring SPI CR1 Register
	uint32_t temp = 0x00000000;
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]

	// 1. Configuring SPI MOde
	temp |= pSPIHandle->SPI_Config.SPI_Mode << SPI_CR1_MSTR;		//For Master Mode MSTR = 1 and for Slave Mode MSTR = 0
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	791b      	ldrb	r3, [r3, #4]
 8000288:	009b      	lsls	r3, r3, #2
 800028a:	461a      	mov	r2, r3
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	4313      	orrs	r3, r2
 8000290:	60fb      	str	r3, [r7, #12]

	// 2. Configuring SPI BUS

	if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	795b      	ldrb	r3, [r3, #5]
 8000296:	2b01      	cmp	r3, #1
 8000298:	d104      	bne.n	80002a4 <SPI_Init+0x38>
	{
		// BIDIMODE = 0
		temp &= ~(1<<SPI_CR1_BIDIMODE);	// BIDIMODE is 15 bit in SPI_CR1 Register
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80002a0:	60fb      	str	r3, [r7, #12]
 80002a2:	e014      	b.n	80002ce <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	795b      	ldrb	r3, [r3, #5]
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d104      	bne.n	80002b6 <SPI_Init+0x4a>
	{
		// BIDIMODE = 1
		temp |= (1<<SPI_CR1_BIDIMODE);	// // BIDIMODE is 15 bit in SPI_CR1 Register
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002b2:	60fb      	str	r3, [r7, #12]
 80002b4:	e00b      	b.n	80002ce <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_SIM_RXONLY)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	795b      	ldrb	r3, [r3, #5]
 80002ba:	2b03      	cmp	r3, #3
 80002bc:	d107      	bne.n	80002ce <SPI_Init+0x62>
	{
		//BIDIMODE = 0 and RXONLY = 1
		temp &= ~(1<<SPI_CR1_BIDIMODE);	// BIDIMODE is 15 bit in SPI_CR1 Register
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80002c4:	60fb      	str	r3, [r7, #12]
		temp |= (1<<SPI_CR1_RXONLY);	// RXONLY is 10th bit in SPI_CR1 Register
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002cc:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configuring SPI Clock Speed

	temp |= pSPIHandle->SPI_Config.SPI_CLKSpeed << SPI_CR1_BR;	// BR [5:3] (3 bit for SPI CLK selection
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	799b      	ldrb	r3, [r3, #6]
 80002d2:	00db      	lsls	r3, r3, #3
 80002d4:	461a      	mov	r2, r3
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	4313      	orrs	r3, r2
 80002da:	60fb      	str	r3, [r7, #12]

	// 4. Configuring SPI Data Frame Format

	temp |= pSPIHandle->SPI_Config.SPI_DataFormat << SPI_CR1_DFF;	// DFF is 11th bit in SPI_CR1
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	79db      	ldrb	r3, [r3, #7]
 80002e0:	02db      	lsls	r3, r3, #11
 80002e2:	461a      	mov	r2, r3
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	4313      	orrs	r3, r2
 80002e8:	60fb      	str	r3, [r7, #12]

	// 5. Configuring SPI CPOL

	temp |= pSPIHandle->SPI_Config.SPI_CPOL << SPI_CR1_CPOL;		// CPOL is 1st bit in SPI_CR1
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	7a5b      	ldrb	r3, [r3, #9]
 80002ee:	005b      	lsls	r3, r3, #1
 80002f0:	461a      	mov	r2, r3
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	4313      	orrs	r3, r2
 80002f6:	60fb      	str	r3, [r7, #12]

	// 6. Configuring CPHASE

	temp |= pSPIHandle->SPI_Config.SPI_CPHASE << SPI_CR1_CPHA;		// CPHA is 0th bit in SPI_CR1
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	7a1b      	ldrb	r3, [r3, #8]
 80002fc:	461a      	mov	r2, r3
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	4313      	orrs	r3, r2
 8000302:	60fb      	str	r3, [r7, #12]

	// 7. Configuring SSM

	temp |= pSPIHandle->SPI_Config.SPI_SlaveMgmt << SPI_CR1_SSM;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	7a9b      	ldrb	r3, [r3, #10]
 8000308:	025b      	lsls	r3, r3, #9
 800030a:	461a      	mov	r2, r3
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	4313      	orrs	r3, r2
 8000310:	60fb      	str	r3, [r7, #12]

	//**************** Updating SPI CR1 register ************************

	pSPIHandle->pSPIx->CR1 = temp;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	68fa      	ldr	r2, [r7, #12]
 8000318:	601a      	str	r2, [r3, #0]
}
 800031a:	bf00      	nop
 800031c:	3710      	adds	r7, #16
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}

08000322 <SPI_GetFlagStatus>:
	}
}


uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000322:	b480      	push	{r7}
 8000324:	b083      	sub	sp, #12
 8000326:	af00      	add	r7, sp, #0
 8000328:	6078      	str	r0, [r7, #4]
 800032a:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)	// True for FLAG Bit = 1
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	689a      	ldr	r2, [r3, #8]
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	4013      	ands	r3, r2
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;		// return FLAG is SET
 8000338:	2301      	movs	r3, #1
 800033a:	e000      	b.n	800033e <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;			// return FLAG is RESET
 800033c:	2300      	movs	r3, #0
}
 800033e:	4618      	mov	r0, r3
 8000340:	370c      	adds	r7, #12
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr

08000348 <SPI_WriteData>:
  * @Note	:	This is blocking Call API to transmit numbers of Bytes in Data
  ******************************************************************************
  */

void SPI_WriteData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b086      	sub	sp, #24
 800034c:	af00      	add	r7, sp, #0
 800034e:	60f8      	str	r0, [r7, #12]
 8000350:	60b9      	str	r1, [r7, #8]
 8000352:	607a      	str	r2, [r7, #4]
	uint8_t temp1 = 0x00;
 8000354:	2300      	movs	r3, #0
 8000356:	75fb      	strb	r3, [r7, #23]

	while(Len > 0)		// Loop while Complete data gets transmitted
 8000358:	e027      	b.n	80003aa <SPI_WriteData+0x62>
	{
		// 1. Wait until TX_Buffer is not Empty (ie TXE bit in SPI_SR Reg is not set)
		// *** One Method
		//while(!(pSPIx->SR & (1<<1));		// ! of (0) is true, so continue
		// Other Method to call a Get Flag status function
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);	// Wait until TXE is SET
 800035a:	bf00      	nop
 800035c:	2102      	movs	r1, #2
 800035e:	68f8      	ldr	r0, [r7, #12]
 8000360:	f7ff ffdf 	bl	8000322 <SPI_GetFlagStatus>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d0f8      	beq.n	800035c <SPI_WriteData+0x14>


		// 2. Check DFF bit for 8-Bit Data Frame Format or 16-Bit Data Frame Format
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF))	 // true for 16-Bit Data Frame Format
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000372:	2b00      	cmp	r3, #0
 8000374:	d00e      	beq.n	8000394 <SPI_WriteData+0x4c>
			//16-Bit Data Frame Format
			/*
			 * (uint16_t*)pTxBuffer		// typecasting the uint8_t* pTxBuffer to Uint16_t*
			 * *((uint16_t*)pTxBuffer)	// Dereferencing
			 */
			pSPIx->DR = *((uint16_t*)pTxBuffer);			// Load 16-Bit Data to SPI_DR
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	881b      	ldrh	r3, [r3, #0]
 800037a:	461a      	mov	r2, r3
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	60da      	str	r2, [r3, #12]

			// Decrement the length by 2 for loading 2 byte of data
			Len --;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	3b01      	subs	r3, #1
 8000384:	607b      	str	r3, [r7, #4]
			Len --;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	3b01      	subs	r3, #1
 800038a:	607b      	str	r3, [r7, #4]

			// Increment the pTXBuffer for next 16-Bit Data transmission
			(uint16_t*)pTxBuffer++;
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	3301      	adds	r3, #1
 8000390:	60bb      	str	r3, [r7, #8]
 8000392:	e00a      	b.n	80003aa <SPI_WriteData+0x62>
		}
		else
		{
			pSPIx->DR = *pTxBuffer;	//Load 8-bit Data to SPI_DR
 8000394:	68bb      	ldr	r3, [r7, #8]
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	461a      	mov	r2, r3
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	60da      	str	r2, [r3, #12]
			Len --;						// Decrement the length by 1 as loading one byte of data
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	3b01      	subs	r3, #1
 80003a2:	607b      	str	r3, [r7, #4]
			pTxBuffer++;				// Increment pTxBuffer for next 8-Bit Data transmission
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	3301      	adds	r3, #1
 80003a8:	60bb      	str	r3, [r7, #8]
	while(Len > 0)		// Loop while Complete data gets transmitted
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d1d4      	bne.n	800035a <SPI_WriteData+0x12>
		}
		//delay_us(2);
	}

	while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);	// Wait for TXE to SET
 80003b0:	bf00      	nop
 80003b2:	2102      	movs	r1, #2
 80003b4:	68f8      	ldr	r0, [r7, #12]
 80003b6:	f7ff ffb4 	bl	8000322 <SPI_GetFlagStatus>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d0f8      	beq.n	80003b2 <SPI_WriteData+0x6a>
	while(SPI_GetFlagStatus(pSPIx, SPI_BSY_FLAG) == FLAG_SET);	// Wait for BSY to RESET
 80003c0:	bf00      	nop
 80003c2:	2180      	movs	r1, #128	; 0x80
 80003c4:	68f8      	ldr	r0, [r7, #12]
 80003c6:	f7ff ffac 	bl	8000322 <SPI_GetFlagStatus>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d0f8      	beq.n	80003c2 <SPI_WriteData+0x7a>

	//clear OVR Flag by reading the data, and status register
	temp1= SPI1->DR;
 80003d0:	4b04      	ldr	r3, [pc, #16]	; (80003e4 <SPI_WriteData+0x9c>)
 80003d2:	68db      	ldr	r3, [r3, #12]
 80003d4:	75fb      	strb	r3, [r7, #23]
	temp1 = SPI1->SR;
 80003d6:	4b03      	ldr	r3, [pc, #12]	; (80003e4 <SPI_WriteData+0x9c>)
 80003d8:	689b      	ldr	r3, [r3, #8]
 80003da:	75fb      	strb	r3, [r7, #23]

}
 80003dc:	bf00      	nop
 80003de:	3718      	adds	r7, #24
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	40013000 	.word	0x40013000

080003e8 <GPIO_Init>:
/*
 * Init and Deinit GPIO
 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
	GPIO_PeriClkControl(pGPIOHandle->pGPIOx, ENABLE);		// Enable the GPIO Clock Peripheral
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2101      	movs	r1, #1
 80003f6:	4618      	mov	r0, r3
 80003f8:	f000 f850 	bl	800049c <GPIO_PeriClkControl>

	uint32_t temp = 0x0;
 80003fc:	2300      	movs	r3, #0
 80003fe:	617b      	str	r3, [r7, #20]
	uint32_t crl = 0x0, crh = 0x0;
 8000400:	2300      	movs	r3, #0
 8000402:	613b      	str	r3, [r7, #16]
 8000404:	2300      	movs	r3, #0
 8000406:	60fb      	str	r3, [r7, #12]
	uint16_t offset;
	uint8_t pinNo;

	pinNo = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	791b      	ldrb	r3, [r3, #4]
 800040c:	727b      	strb	r3, [r7, #9]

	crl = pGPIOHandle -> pGPIOx -> CRL;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	613b      	str	r3, [r7, #16]
	crh = pGPIOHandle -> pGPIOx -> CRH;
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	685b      	ldr	r3, [r3, #4]
 800041c:	60fb      	str	r3, [r7, #12]

	if(pinNo < 8)
 800041e:	7a7b      	ldrb	r3, [r7, #9]
 8000420:	2b07      	cmp	r3, #7
 8000422:	d806      	bhi.n	8000432 <GPIO_Init+0x4a>
	{
		offset = pinNo * 4;
 8000424:	7a7b      	ldrb	r3, [r7, #9]
 8000426:	b29b      	uxth	r3, r3
 8000428:	009b      	lsls	r3, r3, #2
 800042a:	817b      	strh	r3, [r7, #10]
		temp = crl;
 800042c:	693b      	ldr	r3, [r7, #16]
 800042e:	617b      	str	r3, [r7, #20]
 8000430:	e006      	b.n	8000440 <GPIO_Init+0x58>
	}
	else
	{
		offset = (pinNo - 8) * 4;
 8000432:	7a7b      	ldrb	r3, [r7, #9]
 8000434:	3b08      	subs	r3, #8
 8000436:	b29b      	uxth	r3, r3
 8000438:	009b      	lsls	r3, r3, #2
 800043a:	817b      	strh	r3, [r7, #10]
		temp = crh;
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	617b      	str	r3, [r7, #20]
	}

	temp &= ~(0xf << offset);
 8000440:	897b      	ldrh	r3, [r7, #10]
 8000442:	220f      	movs	r2, #15
 8000444:	fa02 f303 	lsl.w	r3, r2, r3
 8000448:	43db      	mvns	r3, r3
 800044a:	461a      	mov	r2, r3
 800044c:	697b      	ldr	r3, [r7, #20]
 800044e:	4013      	ands	r3, r2
 8000450:	617b      	str	r3, [r7, #20]
	temp |= (pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << offset)| (pGPIOHandle -> GPIO_PinConfig.GPIO_PinOutInType << (offset + 2));
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	795b      	ldrb	r3, [r3, #5]
 8000456:	461a      	mov	r2, r3
 8000458:	897b      	ldrh	r3, [r7, #10]
 800045a:	409a      	lsls	r2, r3
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	799b      	ldrb	r3, [r3, #6]
 8000460:	4619      	mov	r1, r3
 8000462:	897b      	ldrh	r3, [r7, #10]
 8000464:	3302      	adds	r3, #2
 8000466:	fa01 f303 	lsl.w	r3, r1, r3
 800046a:	4313      	orrs	r3, r2
 800046c:	461a      	mov	r2, r3
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	4313      	orrs	r3, r2
 8000472:	617b      	str	r3, [r7, #20]

	if(pinNo < 8)
 8000474:	7a7b      	ldrb	r3, [r7, #9]
 8000476:	2b07      	cmp	r3, #7
 8000478:	d802      	bhi.n	8000480 <GPIO_Init+0x98>
	{
		crl = temp;
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	613b      	str	r3, [r7, #16]
 800047e:	e001      	b.n	8000484 <GPIO_Init+0x9c>
		//pGPIOHandle -> pGPIOx -> CRL =  temp;
	}
	else
	{
		crh = temp;
 8000480:	697b      	ldr	r3, [r7, #20]
 8000482:	60fb      	str	r3, [r7, #12]
		//pGPIOHandle -> pGPIOx -> CRH = temp;

	}

	pGPIOHandle -> pGPIOx -> CRL =  crl;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	693a      	ldr	r2, [r7, #16]
 800048a:	601a      	str	r2, [r3, #0]
	pGPIOHandle -> pGPIOx -> CRH = crh;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	68fa      	ldr	r2, [r7, #12]
 8000492:	605a      	str	r2, [r3, #4]

}
 8000494:	bf00      	nop
 8000496:	3718      	adds	r7, #24
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <GPIO_PeriClkControl>:
/*
 * Peripheral Clock Setup
 */

void GPIO_PeriClkControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	460b      	mov	r3, r1
 80004a6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80004a8:	78fb      	ldrb	r3, [r7, #3]
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d136      	bne.n	800051c <GPIO_PeriClkControl+0x80>
	{
		if(pGPIOx == GPIOA)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4a38      	ldr	r2, [pc, #224]	; (8000594 <GPIO_PeriClkControl+0xf8>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d106      	bne.n	80004c4 <GPIO_PeriClkControl+0x28>
		{
			GPIOA_PCLK_EN();
 80004b6:	4b38      	ldr	r3, [pc, #224]	; (8000598 <GPIO_PeriClkControl+0xfc>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	4a37      	ldr	r2, [pc, #220]	; (8000598 <GPIO_PeriClkControl+0xfc>)
 80004bc:	f043 0304 	orr.w	r3, r3, #4
 80004c0:	6193      	str	r3, [r2, #24]
		}

			//AFIO_PCLK_DI();
	}

}
 80004c2:	e061      	b.n	8000588 <GPIO_PeriClkControl+0xec>
		else if(pGPIOx == GPIOB)
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4a35      	ldr	r2, [pc, #212]	; (800059c <GPIO_PeriClkControl+0x100>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d106      	bne.n	80004da <GPIO_PeriClkControl+0x3e>
			GPIOB_PCLK_EN();
 80004cc:	4b32      	ldr	r3, [pc, #200]	; (8000598 <GPIO_PeriClkControl+0xfc>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a31      	ldr	r2, [pc, #196]	; (8000598 <GPIO_PeriClkControl+0xfc>)
 80004d2:	f043 0308 	orr.w	r3, r3, #8
 80004d6:	6193      	str	r3, [r2, #24]
}
 80004d8:	e056      	b.n	8000588 <GPIO_PeriClkControl+0xec>
		else if(pGPIOx == GPIOC)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4a30      	ldr	r2, [pc, #192]	; (80005a0 <GPIO_PeriClkControl+0x104>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d106      	bne.n	80004f0 <GPIO_PeriClkControl+0x54>
			GPIOC_PCLK_EN();
 80004e2:	4b2d      	ldr	r3, [pc, #180]	; (8000598 <GPIO_PeriClkControl+0xfc>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	4a2c      	ldr	r2, [pc, #176]	; (8000598 <GPIO_PeriClkControl+0xfc>)
 80004e8:	f043 0310 	orr.w	r3, r3, #16
 80004ec:	6193      	str	r3, [r2, #24]
}
 80004ee:	e04b      	b.n	8000588 <GPIO_PeriClkControl+0xec>
		else if(pGPIOx == GPIOD)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4a2c      	ldr	r2, [pc, #176]	; (80005a4 <GPIO_PeriClkControl+0x108>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d106      	bne.n	8000506 <GPIO_PeriClkControl+0x6a>
			GPIOD_PCLK_EN();
 80004f8:	4b27      	ldr	r3, [pc, #156]	; (8000598 <GPIO_PeriClkControl+0xfc>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a26      	ldr	r2, [pc, #152]	; (8000598 <GPIO_PeriClkControl+0xfc>)
 80004fe:	f043 0320 	orr.w	r3, r3, #32
 8000502:	6193      	str	r3, [r2, #24]
}
 8000504:	e040      	b.n	8000588 <GPIO_PeriClkControl+0xec>
		else if(pGPIOx == GPIOE)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4a27      	ldr	r2, [pc, #156]	; (80005a8 <GPIO_PeriClkControl+0x10c>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d13c      	bne.n	8000588 <GPIO_PeriClkControl+0xec>
			GPIOE_PCLK_EN();
 800050e:	4b22      	ldr	r3, [pc, #136]	; (8000598 <GPIO_PeriClkControl+0xfc>)
 8000510:	699b      	ldr	r3, [r3, #24]
 8000512:	4a21      	ldr	r2, [pc, #132]	; (8000598 <GPIO_PeriClkControl+0xfc>)
 8000514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000518:	6193      	str	r3, [r2, #24]
}
 800051a:	e035      	b.n	8000588 <GPIO_PeriClkControl+0xec>
		if(pGPIOx == GPIOA)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4a1d      	ldr	r2, [pc, #116]	; (8000594 <GPIO_PeriClkControl+0xf8>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d106      	bne.n	8000532 <GPIO_PeriClkControl+0x96>
			GPIOA_PCLK_DI();
 8000524:	4b1c      	ldr	r3, [pc, #112]	; (8000598 <GPIO_PeriClkControl+0xfc>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	4a1b      	ldr	r2, [pc, #108]	; (8000598 <GPIO_PeriClkControl+0xfc>)
 800052a:	f023 0304 	bic.w	r3, r3, #4
 800052e:	6193      	str	r3, [r2, #24]
}
 8000530:	e02a      	b.n	8000588 <GPIO_PeriClkControl+0xec>
		else if(pGPIOx == GPIOB)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4a19      	ldr	r2, [pc, #100]	; (800059c <GPIO_PeriClkControl+0x100>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d106      	bne.n	8000548 <GPIO_PeriClkControl+0xac>
			GPIOB_PCLK_DI();
 800053a:	4b17      	ldr	r3, [pc, #92]	; (8000598 <GPIO_PeriClkControl+0xfc>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	4a16      	ldr	r2, [pc, #88]	; (8000598 <GPIO_PeriClkControl+0xfc>)
 8000540:	f023 0308 	bic.w	r3, r3, #8
 8000544:	6193      	str	r3, [r2, #24]
}
 8000546:	e01f      	b.n	8000588 <GPIO_PeriClkControl+0xec>
		else if(pGPIOx == GPIOC)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4a15      	ldr	r2, [pc, #84]	; (80005a0 <GPIO_PeriClkControl+0x104>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d106      	bne.n	800055e <GPIO_PeriClkControl+0xc2>
			GPIOC_PCLK_DI();
 8000550:	4b11      	ldr	r3, [pc, #68]	; (8000598 <GPIO_PeriClkControl+0xfc>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a10      	ldr	r2, [pc, #64]	; (8000598 <GPIO_PeriClkControl+0xfc>)
 8000556:	f023 0310 	bic.w	r3, r3, #16
 800055a:	6193      	str	r3, [r2, #24]
}
 800055c:	e014      	b.n	8000588 <GPIO_PeriClkControl+0xec>
		else if(pGPIOx == GPIOD)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4a10      	ldr	r2, [pc, #64]	; (80005a4 <GPIO_PeriClkControl+0x108>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d106      	bne.n	8000574 <GPIO_PeriClkControl+0xd8>
			GPIOD_PCLK_DI();
 8000566:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <GPIO_PeriClkControl+0xfc>)
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	4a0b      	ldr	r2, [pc, #44]	; (8000598 <GPIO_PeriClkControl+0xfc>)
 800056c:	f023 0320 	bic.w	r3, r3, #32
 8000570:	6193      	str	r3, [r2, #24]
}
 8000572:	e009      	b.n	8000588 <GPIO_PeriClkControl+0xec>
		else if(pGPIOx == GPIOE)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4a0c      	ldr	r2, [pc, #48]	; (80005a8 <GPIO_PeriClkControl+0x10c>)
 8000578:	4293      	cmp	r3, r2
 800057a:	d105      	bne.n	8000588 <GPIO_PeriClkControl+0xec>
			GPIOE_PCLK_DI();
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <GPIO_PeriClkControl+0xfc>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a05      	ldr	r2, [pc, #20]	; (8000598 <GPIO_PeriClkControl+0xfc>)
 8000582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000586:	6193      	str	r3, [r2, #24]
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	40010800 	.word	0x40010800
 8000598:	40021000 	.word	0x40021000
 800059c:	40010c00 	.word	0x40010c00
 80005a0:	40011000 	.word	0x40011000
 80005a4:	40011400 	.word	0x40011400
 80005a8:	40011800 	.word	0x40011800

080005ac <AFIO_PeriClkControl>:

/*
 * AFIO Clock Setup
 */
void AFIO_PeriClkControl(uint8_t EnorDi)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
	if(EnorDi == ENABLE)
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d106      	bne.n	80005ca <AFIO_PeriClkControl+0x1e>
	{
		AFIO_PCLK_EN();
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <AFIO_PeriClkControl+0x34>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <AFIO_PeriClkControl+0x34>)
 80005c2:	f043 0301 	orr.w	r3, r3, #1
 80005c6:	6193      	str	r3, [r2, #24]
	else
	{
		AFIO_PCLK_DI();
	}

}
 80005c8:	e005      	b.n	80005d6 <AFIO_PeriClkControl+0x2a>
		AFIO_PCLK_DI();
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <AFIO_PeriClkControl+0x34>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <AFIO_PeriClkControl+0x34>)
 80005d0:	f023 0301 	bic.w	r3, r3, #1
 80005d4:	6193      	str	r3, [r2, #24]
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr
 80005e0:	40021000 	.word	0x40021000

080005e4 <GPIO_WritePin>:
	return value;
}

//Write to single bit of PORTx
void GPIO_WritePin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t value)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	460b      	mov	r3, r1
 80005ee:	70fb      	strb	r3, [r7, #3]
 80005f0:	4613      	mov	r3, r2
 80005f2:	70bb      	strb	r3, [r7, #2]
	if(value == GPIO_PIN_SET)
 80005f4:	78bb      	ldrb	r3, [r7, #2]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d109      	bne.n	800060e <GPIO_WritePin+0x2a>
	{
		pGPIOx -> ODR |= 1 << PinNumber;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	68db      	ldr	r3, [r3, #12]
 80005fe:	78fa      	ldrb	r2, [r7, #3]
 8000600:	2101      	movs	r1, #1
 8000602:	fa01 f202 	lsl.w	r2, r1, r2
 8000606:	431a      	orrs	r2, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	60da      	str	r2, [r3, #12]
	}
	else
	{
		pGPIOx -> ODR &= ~ (1 << PinNumber);
	}
}
 800060c:	e009      	b.n	8000622 <GPIO_WritePin+0x3e>
		pGPIOx -> ODR &= ~ (1 << PinNumber);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	68db      	ldr	r3, [r3, #12]
 8000612:	78fa      	ldrb	r2, [r7, #3]
 8000614:	2101      	movs	r1, #1
 8000616:	fa01 f202 	lsl.w	r2, r1, r2
 800061a:	43d2      	mvns	r2, r2
 800061c:	401a      	ands	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	60da      	str	r2, [r3, #12]
}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr

0800062c <main>:

/************************************************************************************
 * 									Main Function
 ************************************************************************************/
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
	char user_data1[] = {"ASHISH"};
 8000632:	4a25      	ldr	r2, [pc, #148]	; (80006c8 <main+0x9c>)
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	e892 0003 	ldmia.w	r2, {r0, r1}
 800063c:	6018      	str	r0, [r3, #0]
 800063e:	3304      	adds	r3, #4
 8000640:	8019      	strh	r1, [r3, #0]
 8000642:	3302      	adds	r3, #2
 8000644:	0c0a      	lsrs	r2, r1, #16
 8000646:	701a      	strb	r2, [r3, #0]

	GPIO_Handle_t pushbutton, redled;

	GPIO_PeriClkControl(GPIOB, ENABLE);
 8000648:	2101      	movs	r1, #1
 800064a:	4820      	ldr	r0, [pc, #128]	; (80006cc <main+0xa0>)
 800064c:	f7ff ff26 	bl	800049c <GPIO_PeriClkControl>

	pushbutton.pGPIOx = GPIOB;
 8000650:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <main+0xa0>)
 8000652:	60bb      	str	r3, [r7, #8]
	pushbutton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 8000654:	2300      	movs	r3, #0
 8000656:	737b      	strb	r3, [r7, #13]
	pushbutton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000658:	230c      	movs	r3, #12
 800065a:	733b      	strb	r3, [r7, #12]
	pushbutton.GPIO_PinConfig.GPIO_PinOutInType = GPIO_IP_PUPD;
 800065c:	2302      	movs	r3, #2
 800065e:	73bb      	strb	r3, [r7, #14]
	GPIO_WritePin(GPIOB, GPIO_PIN_NO_12, GPIO_PIN_SET);		// Activate Pull-up on PB13
 8000660:	2201      	movs	r2, #1
 8000662:	210c      	movs	r1, #12
 8000664:	4819      	ldr	r0, [pc, #100]	; (80006cc <main+0xa0>)
 8000666:	f7ff ffbd 	bl	80005e4 <GPIO_WritePin>
	GPIO_Init(&pushbutton);
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff feba 	bl	80003e8 <GPIO_Init>


	redled.pGPIOx = GPIOB;
 8000674:	4b15      	ldr	r3, [pc, #84]	; (80006cc <main+0xa0>)
 8000676:	603b      	str	r3, [r7, #0]
	redled.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_2MHZ;
 8000678:	2302      	movs	r3, #2
 800067a:	717b      	strb	r3, [r7, #5]
	redled.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 800067c:	230f      	movs	r3, #15
 800067e:	713b      	strb	r3, [r7, #4]
	redled.GPIO_PinConfig.GPIO_PinOutInType = GPIO_OP_PP;
 8000680:	2300      	movs	r3, #0
 8000682:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(&redled);
 8000684:	463b      	mov	r3, r7
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff feae 	bl	80003e8 <GPIO_Init>
		delay_ms(100);
	}*/


	// Initialize the GPIO pins for SPI1
	SPI1_GPIOPin_Def();					// SPI1 GPIO Pin Definition Setting Call
 800068c:	f000 f822 	bl	80006d4 <SPI1_GPIOPin_Def>

	// Initialize the SPI1 with user configuration settings
	SPI1_UsrConfig();					// SPI1 User Configuration Call
 8000690:	f000 f852 	bl	8000738 <SPI1_UsrConfig>

	// If H/W Slave Management is Selected (ie SSM = 0), so for Master Mode SSOE should be SET
	// When SSOE = SET then NSS pin will be pulled Low automatically whenever SPE =  SET (SPI is Enabled)
	// and NSS will be pulled high automatically when SPE = RESET (SPI is disabled)

	SPI_SSOEConfig(SPI1, ENABLE);			// SSOE = 1 for Master Mode, H/W Slave Select Management (ie SSM = 0)
 8000694:	2101      	movs	r1, #1
 8000696:	480e      	ldr	r0, [pc, #56]	; (80006d0 <main+0xa4>)
 8000698:	f7ff fdcd 	bl	8000236 <SPI_SSOEConfig>

	SPI_PeriControl(SPI1,ENABLE);
 800069c:	2101      	movs	r1, #1
 800069e:	480c      	ldr	r0, [pc, #48]	; (80006d0 <main+0xa4>)
 80006a0:	f7ff fdae 	bl	8000200 <SPI_PeriControl>
	SPI_WriteData(SPI1,(uint8_t*)user_data1,strlen(user_data1));
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff fd61 	bl	8000170 <strlen>
 80006ae:	4602      	mov	r2, r0
 80006b0:	f107 0310 	add.w	r3, r7, #16
 80006b4:	4619      	mov	r1, r3
 80006b6:	4806      	ldr	r0, [pc, #24]	; (80006d0 <main+0xa4>)
 80006b8:	f7ff fe46 	bl	8000348 <SPI_WriteData>
	SPI_PeriControl(SPI1,DISABLE);
 80006bc:	2100      	movs	r1, #0
 80006be:	4804      	ldr	r0, [pc, #16]	; (80006d0 <main+0xa4>)
 80006c0:	f7ff fd9e 	bl	8000200 <SPI_PeriControl>



	while(1)
 80006c4:	e7fe      	b.n	80006c4 <main+0x98>
 80006c6:	bf00      	nop
 80006c8:	08000828 	.word	0x08000828
 80006cc:	40010c00 	.word	0x40010c00
 80006d0:	40013000 	.word	0x40013000

080006d4 <SPI1_GPIOPin_Def>:
	}
	return 0;
}

void SPI1_GPIOPin_Def()
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPI1Pins;

	AFIO_PeriClkControl(ENABLE);
 80006da:	2001      	movs	r0, #1
 80006dc:	f7ff ff66 	bl	80005ac <AFIO_PeriClkControl>

	SPI1Pins.pGPIOx = GPIOA;
 80006e0:	4b14      	ldr	r3, [pc, #80]	; (8000734 <SPI1_GPIOPin_Def+0x60>)
 80006e2:	603b      	str	r3, [r7, #0]
	SPI1Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_50MHZ;
 80006e4:	2303      	movs	r3, #3
 80006e6:	717b      	strb	r3, [r7, #5]
	SPI1Pins.GPIO_PinConfig.GPIO_PinOutInType = GPIO_ALTFN_OP_PP;
 80006e8:	2302      	movs	r3, #2
 80006ea:	71bb      	strb	r3, [r7, #6]

	SPI1Pins.GPIO_PinConfig.GPIO_PinNumber = SCK_Pin;		// SPI1 SCK Pin
 80006ec:	2305      	movs	r3, #5
 80006ee:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&SPI1Pins);
 80006f0:	463b      	mov	r3, r7
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff fe78 	bl	80003e8 <GPIO_Init>

	SPI1Pins.GPIO_PinConfig.GPIO_PinNumber = MOSI_Pin;		// SPI1 MOSI pin
 80006f8:	2307      	movs	r3, #7
 80006fa:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&SPI1Pins);
 80006fc:	463b      	mov	r3, r7
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff fe72 	bl	80003e8 <GPIO_Init>

	SPI1Pins.GPIO_PinConfig.GPIO_PinNumber = MISO_Pin;		// SPI1 MISO  Pin
 8000704:	2306      	movs	r3, #6
 8000706:	713b      	strb	r3, [r7, #4]
	SPI1Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 8000708:	2300      	movs	r3, #0
 800070a:	717b      	strb	r3, [r7, #5]
	SPI1Pins.GPIO_PinConfig.GPIO_PinOutInType = GPIO_IP_FLOATING;
 800070c:	2301      	movs	r3, #1
 800070e:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(&SPI1Pins);
 8000710:	463b      	mov	r3, r7
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff fe68 	bl	80003e8 <GPIO_Init>


	SPI1Pins.GPIO_PinConfig.GPIO_PinNumber = NSS_Pin;		// SPI1 NSS Pin
 8000718:	2304      	movs	r3, #4
 800071a:	713b      	strb	r3, [r7, #4]
	SPI1Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_50MHZ;
 800071c:	2303      	movs	r3, #3
 800071e:	717b      	strb	r3, [r7, #5]
	SPI1Pins.GPIO_PinConfig.GPIO_PinOutInType = GPIO_ALTFN_OP_PP;		// Configuration for SSM = 0, SSOE = 1
 8000720:	2302      	movs	r3, #2
 8000722:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(&SPI1Pins);
 8000724:	463b      	mov	r3, r7
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff fe5e 	bl	80003e8 <GPIO_Init>
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40010800 	.word	0x40010800

08000738 <SPI1_UsrConfig>:

void SPI1_UsrConfig()
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI1_UsrConfig;

	SPI1_UsrConfig.pSPIx = SPI1;
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <SPI1_UsrConfig+0x38>)
 8000740:	607b      	str	r3, [r7, #4]
	SPI1_UsrConfig.SPI_Config.SPI_Mode = SPI_MODE_MASTER;
 8000742:	2301      	movs	r3, #1
 8000744:	723b      	strb	r3, [r7, #8]
	SPI1_UsrConfig.SPI_Config.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000746:	2301      	movs	r3, #1
 8000748:	727b      	strb	r3, [r7, #9]
	SPI1_UsrConfig.SPI_Config.SPI_CLKSpeed = SPI_CLKSPEED_FPCLK_128;		// SCL Clock Speed of 125 KHz
 800074a:	2306      	movs	r3, #6
 800074c:	72bb      	strb	r3, [r7, #10]
	SPI1_UsrConfig.SPI_Config.SPI_CPHASE = SPI_CPHASE_DATA_LEAD_EDGE;
 800074e:	2300      	movs	r3, #0
 8000750:	733b      	strb	r3, [r7, #12]
	SPI1_UsrConfig.SPI_Config.SPI_CPOL = SPI_CPOL_0_IDLE;
 8000752:	2300      	movs	r3, #0
 8000754:	737b      	strb	r3, [r7, #13]
	SPI1_UsrConfig.SPI_Config.SPI_DataFormat = SPI_DFF_8BIT;			// Data Frame Format of 8-Bit
 8000756:	2300      	movs	r3, #0
 8000758:	72fb      	strb	r3, [r7, #11]
	SPI1_UsrConfig.SPI_Config.SPI_SlaveMgmt = SPI_SSM_DI;				// H/W Slave Management Enabled for NSS Pin
 800075a:	2300      	movs	r3, #0
 800075c:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI1_UsrConfig);
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff fd83 	bl	800026c <SPI_Init>
}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40013000 	.word	0x40013000

08000774 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000774:	480d      	ldr	r0, [pc, #52]	; (80007ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000776:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000778:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800077e:	490d      	ldr	r1, [pc, #52]	; (80007b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000780:	4a0d      	ldr	r2, [pc, #52]	; (80007b8 <LoopForever+0xe>)
  movs r3, #0
 8000782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000784:	e002      	b.n	800078c <LoopCopyDataInit>

08000786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078a:	3304      	adds	r3, #4

0800078c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800078c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000790:	d3f9      	bcc.n	8000786 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000792:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000794:	4c0a      	ldr	r4, [pc, #40]	; (80007c0 <LoopForever+0x16>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000798:	e001      	b.n	800079e <LoopFillZerobss>

0800079a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800079c:	3204      	adds	r2, #4

0800079e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a0:	d3fb      	bcc.n	800079a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007a2:	f000 f811 	bl	80007c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007a6:	f7ff ff41 	bl	800062c <main>

080007aa <LoopForever>:

LoopForever:
    b LoopForever
 80007aa:	e7fe      	b.n	80007aa <LoopForever>
  ldr   r0, =_estack
 80007ac:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80007b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80007b8:	08000838 	.word	0x08000838
  ldr r2, =_sbss
 80007bc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80007c0:	2000001c 	.word	0x2000001c

080007c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007c4:	e7fe      	b.n	80007c4 <ADC1_2_IRQHandler>
	...

080007c8 <__libc_init_array>:
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	2600      	movs	r6, #0
 80007cc:	4d0c      	ldr	r5, [pc, #48]	; (8000800 <__libc_init_array+0x38>)
 80007ce:	4c0d      	ldr	r4, [pc, #52]	; (8000804 <__libc_init_array+0x3c>)
 80007d0:	1b64      	subs	r4, r4, r5
 80007d2:	10a4      	asrs	r4, r4, #2
 80007d4:	42a6      	cmp	r6, r4
 80007d6:	d109      	bne.n	80007ec <__libc_init_array+0x24>
 80007d8:	f000 f81a 	bl	8000810 <_init>
 80007dc:	2600      	movs	r6, #0
 80007de:	4d0a      	ldr	r5, [pc, #40]	; (8000808 <__libc_init_array+0x40>)
 80007e0:	4c0a      	ldr	r4, [pc, #40]	; (800080c <__libc_init_array+0x44>)
 80007e2:	1b64      	subs	r4, r4, r5
 80007e4:	10a4      	asrs	r4, r4, #2
 80007e6:	42a6      	cmp	r6, r4
 80007e8:	d105      	bne.n	80007f6 <__libc_init_array+0x2e>
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80007f0:	4798      	blx	r3
 80007f2:	3601      	adds	r6, #1
 80007f4:	e7ee      	b.n	80007d4 <__libc_init_array+0xc>
 80007f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80007fa:	4798      	blx	r3
 80007fc:	3601      	adds	r6, #1
 80007fe:	e7f2      	b.n	80007e6 <__libc_init_array+0x1e>
 8000800:	08000830 	.word	0x08000830
 8000804:	08000830 	.word	0x08000830
 8000808:	08000830 	.word	0x08000830
 800080c:	08000834 	.word	0x08000834

08000810 <_init>:
 8000810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000812:	bf00      	nop
 8000814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000816:	bc08      	pop	{r3}
 8000818:	469e      	mov	lr, r3
 800081a:	4770      	bx	lr

0800081c <_fini>:
 800081c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800081e:	bf00      	nop
 8000820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000822:	bc08      	pop	{r3}
 8000824:	469e      	mov	lr, r3
 8000826:	4770      	bx	lr
